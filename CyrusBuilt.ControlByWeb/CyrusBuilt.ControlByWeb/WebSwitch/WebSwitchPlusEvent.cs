using System;
using CyrusBuilt.ControlByWeb.Events;

namespace CyrusBuilt.ControlByWeb.WebSwitch
{
    /// <summary>
    /// An event generated by the WebSwitch module. Note that this event object
    /// should be read-only by user code, so all properties contain getters
    /// only. You can use the set methods to explicitly to set or override the
    /// values if necessary (such as from methods that populate the properties
    /// with values parsed from a response from the device).
    /// </summary>
    public class WebSwitchPlusEvent : EventBase
    {
        #region Fields
        private WebSwitchAction _action = WebSwitchAction.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent</b>
        /// class. This is the default constructor.
        /// </summary>
        public WebSwitchPlusEvent()
            : base() {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the action applied to this event.
        /// </summary>
        public WebSwitchAction Action {
            get { return this._action; }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Sets or overrides the action being applied.
        /// </summary>
        /// <param name="action">
        /// The action to apply to the relay.
        /// </param>
        public void SetOrOverrideAction(WebSwitchAction action) {
            this._action = action;
        }

        /// <summary>
        /// Resets all state values back to their defaults except for
        /// <see cref="Id"/> because the ID of the event instance should never
        /// change during the lifetime of the event unless there is need to 
        /// override the ID for some reason.
        /// </summary>
        public override void Reset() {
            base.Reset();
            this._action = WebSwitchAction.None;
        }

        /// <summary>
        /// Determines whether the specified System.Object is equal to the
        /// current instance.
        /// </summary>
        /// <param name="obj">
        /// The System.Object to compare to the current instance.
        /// </param>
        /// <returns>
        /// true if the specified System.Object is equal to the current
        /// CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent; otherwise, false.
        /// </returns>
        public override Boolean Equals(Object obj) {
            // If parameter is null, then fail.
            if (obj == null) {
                return false;
            }

            // If parameter cannot be cast to X320Event, then fail.
            WebSwitchPlusEvent evt = obj as WebSwitchPlusEvent;
            if ((WebSwitchPlusEvent)evt == null) {
                return false;
            }

            // Success if the fields match.
            Boolean isMatch = ((this.Action == evt.Action) &&
                                (this.Active == evt.Active) &&
                                (this.AlwaysOn == evt.AlwaysOn) &&
                                (this.Count == evt.Count) &&
                                (this.CurrentTime == evt.CurrentTime) &&
                                (this.Id == evt.Id) &&
                                (this.IsDisabled == evt.IsDisabled) &&
                                (this.NextEvent == evt.NextEvent) &&
                                (this.Period == evt.Period) &&
                                (this.PulseDuration == evt.PulseDuration) &&
                                (this.RelayNumber == evt.RelayNumber));
            return isMatch;
        }

        /// <summary>
        /// Determines whether the specified CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent
        /// is equal to the current instance.
        /// </summary>
        /// <param name="evt">
        /// The CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent to compare to
        /// the current instance.
        /// </param>
        /// <returns>
        /// true if the specified CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent
        /// is equal to the current CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent; 
        /// otherwise, false.
        /// </returns>
        public Boolean Equals(WebSwitchPlusEvent evt) {
            // If param is null then fail.
            if ((Object)evt == null) {
                return false;
            }

            // Success if the fields match.
            Boolean isMatch = ((this.Action == evt.Action) &&
                                (this.Active == evt.Active) &&
                                (this.AlwaysOn == evt.AlwaysOn) &&
                                (this.Count == evt.Count) &&
                                (this.CurrentTime == evt.CurrentTime) &&
                                (this.Id == evt.Id) &&
                                (this.IsDisabled == evt.IsDisabled) &&
                                (this.NextEvent == evt.NextEvent) &&
                                (this.Period == evt.Period) &&
                                (this.PulseDuration == evt.PulseDuration) &&
                                (this.RelayNumber == evt.RelayNumber));
            return isMatch;
        }

        /// <summary>
        /// Returns the hash code for this instance.
        /// </summary>
        /// <returns>
        /// The hash code for this instance.
        /// </returns>
        public override Int32 GetHashCode() {
            // Since we override Equals(), we need to override GetHashCode().
            // Since the fields used to calculate the hash code are supposed to
            // be immutable, and thus never change during the life of the
            // object, we return the hashcode of the randomly generated GUID
            // that was created in the base constructor.
            return this.GetHashCode();
        }
        #endregion
    }
}
