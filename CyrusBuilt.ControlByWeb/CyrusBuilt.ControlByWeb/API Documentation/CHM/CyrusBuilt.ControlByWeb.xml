<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>CyrusBuilt.ControlByWeb</name>
  </assembly>
  <members>
    <member name="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
      <summary>
            The exception that is thrown when a bad response is received from a device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException.#ctor">
      <summary>
            Initializes an new instance of the <b>CyrusBuilt.ControlByWeb.BadResponseFromDeviceException</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException.#ctor(System.Byte[])">
      <summary>
            Initializes an new instance of the <b>CyrusBuilt.ControlByWeb.BadResponseFromDeviceException</b> class
            with a byte buffer containing the actual response recieved from the device.
            </summary>
      <param name="recvBuffer">
            A byte buffer containing the actual response recieved from the device.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException.#ctor(System.String)">
      <summary>
            Initializes an new instance of the <b>CyrusBuilt.ControlByWeb.BadResponseFromDeviceException</b> class
            with the actual response recieved from the device.
            </summary>
      <param name="response">
            The actual response recieved from the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException.Response">
      <summary>
            Gets the actual response recieved from the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Common">
      <summary>
            Common utilities and constants that can be used with one or more modules.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.AppendAuthToCommand(System.String,System.Security.SecureString)">
      <summary>
            Appends an authorization string to a module command or request.
            </summary>
      <param name="command">
            The command to append the authorization string to.
            </param>
      <param name="password">
            The password to encode in the authorization string.
            </param>
      <returns>
            If command is null or empty, an empty string is returned. If password 
            is null, the specified command is returned as-is. Otherwise, a new 
            command  string with the command and authorization string is returned. 
            The credentials are Base64-encoded in the authorization string.
            </returns>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_POLL_INTERVAL">
      <summary>
            The time (in seconds) between poll cycles.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT">
      <summary>
            The default communication port used on ControlByWeb modules.
            This port is defined as 80.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PULSE_TIME">
      <summary>
            The default amount of time to pulse a relay (1.5 seconds).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetNamedChildNode(System.Xml.XmlNode,System.String)">
      <summary>
            Enumerates the specified parent node and returns the named child
            node if found.
            </summary>
      <param name="parentNode">
            The parent node to enumerate.
            </param>
      <param name="name">
            The name of the child node to search for.
            </param>
      <returns>
            If successful, the located child node. If the parent node is null
            of the specified child node could not be located, then returns null.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetPowerUpFlag(System.Int32)">
      <summary>
            Gets the corresponding <see cref="T:CyrusBuilt.ControlByWeb.PowerUpFlag" /> from the specified
            flag code.
            </summary>
      <param name="value">
            An integer value representing a power up flag state. Should be either
            <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_OFF" /> or <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_ON" />.
            </param>
      <returns>
            The corresponding flag.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetPowerUpFlagCode(CyrusBuilt.ControlByWeb.PowerUpFlag)">
      <summary>
            Gets the integer value of the specified <see cref="T:CyrusBuilt.ControlByWeb.PowerUpFlag" />.
            </summary>
      <param name="flag">
            The flag to convert into an integer.
            </param>
      <returns>
            Then integer value of the specified flag.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetRebootState(System.Int32)">
      <summary>
            Gets the corresponding <see cref="T:CyrusBuilt.ControlByWeb.RebootState" /> from the specified
            state code.
            </summary>
      <param name="stateCode">
            An integer value representing the reboot state of the WebRelay
            module.
            </param>
      <returns>
            If successful, the corresponding <see cref="T:CyrusBuilt.ControlByWeb.RebootState" />;
            Otherise, an exception is thrown.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            An invalid integer was specified. Must be a value 1 - 4.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetRebootStateCode(CyrusBuilt.ControlByWeb.RebootState)">
      <summary>
            Gets the integer value of the specified <see cref="T:CyrusBuilt.ControlByWeb.RebootState" />.
            </summary>
      <param name="state">
            The state to convert into an integer.
            </param>
      <returns>
            The integer value of the specified state.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetRelayState(System.Int32)">
      <summary>
            Converts an integer value representing the state of a relay to a
            <see cref="T:CyrusBuilt.ControlByWeb.Relays.RelayState" />.
            </summary>
      <param name="stateCode">
            An integer value representing the state of the relay.
            </param>
      <returns>
            The RelayState associated with the specified code.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The stateCode is less than 0 or greater than 5.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetRelayState(System.Int32,System.Boolean)">
      <summary>
            Converts an integer value representing the state of a relay to a
            <see cref="T:CyrusBuilt.ControlByWeb.Relays.RelayState" />.
            </summary>
      <param name="stateCode">
            An integer value representing the state of the relay.
            </param>
      <param name="autoRebootEnabled">
            A flag indicating whether or not the auto-reboot feature is enabled.
            </param>
      <returns>
            The RelayState associated with the specified code.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The stateCode is less than 0 or greater than 5.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.GetRelayStateCode(CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Gets a state code associated with the specified state.
            </summary>
      <param name="state">
            The current state of the WebRelay module.
            </param>
      <returns>
            The integer value associated with the specified state.
            </returns>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.INPUT_STATE_OFF">
      <summary>
            The actual state value of an input that is off or driven
            low (less than 5 volts).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.INPUT_STATE_ON">
      <summary>
            The actual state value of an input that is on or driven
            high (greater than 5 volts).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION">
      <summary>
            The maximum allowable relay pulse duration.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_OFF">
      <summary>
            Indicates normal operation for a given power up indicator state.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_ON">
      <summary>
            Indicates power loss for a give power up indicator state.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.REBOOT_STATE_AUTO_REBOOT_OFF">
      <summary>
            The actual value of a relay that has its reboot controller
            (auto-reboot feature) disabled (0).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.REBOOT_STATE_PINGING">
      <summary>
            The actual value of a relay that is periodically pinging
            the device (1). This is normal operation.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.REBOOT_STATE_REBOOTING">
      <summary>
            The actual value of a relay that is currently in a reboot cycle (3).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.REBOOT_STATE_WAITING_FOR_BOOT">
      <summary>
            The actual value of a relay that is powered on and booting up (4).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.REBOOT_STATE_WAITING_FOR_RESPONSE">
      <summary>
            The actual value of a relay that is waiting for a response
            on a ping request to the device (2).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.RELAY_STATE_DISABLE_AUTO_REBOOT">
      <summary>
            The actual state value of a realy that has its auto-reboot feature
            disabled.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.RELAY_STATE_ENABLE_AUTO_REBOOT">
      <summary>
            The actual state value of a relay that has its auto-reboot feature
            enabled.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.RELAY_STATE_OFF">
      <summary>
            The actual state value of a relay in the "off" position (de-energized).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.RELAY_STATE_ON">
      <summary>
            The actual state value of a relay in the "on" position (energized).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.RELAY_STATE_PULSE_OR_REBOOT">
      <summary>
            The actual state value of a relay that is pulsing (switching on and off).
            If in Automatic Reboot mode, this will reboot the device being controlled.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Common.RELAY_STATE_TOGGLE">
      <summary>
            The actual state value of a relay that is set to toggle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Common.TrimResponse(System.String)">
      <summary>
            Trims extraneous null terminations from the XML response which
            invalidates the XML as a document. The the response from the
            device is not trimmed, it cannot be loaded or parsed by
            <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="input">
            The response message string to trim.
            </param>
      <returns>
            The trimmed version of the message. If a null or empty string is
            provided, an empty string is returned. If no null termination
            strings are found, the original string is returned as-is.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
      <summary>
            The exception that occurs when connecting to Five Input Module device fails.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ConnectionFailedException.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.ConnectionFailedException</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ConnectionFailedException.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.ConnectionFailedException</b> class
            with the IP address and port to which the connection failed.
            </summary>
      <param name="address">
            The IPv4 address of the device to which the connection failed.
            </param>
      <param name="port">
            The port number that the connection failed on. Default is port 80.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ConnectionFailedException.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.ConnectionFailedException</b> class
            with the remote endpoint to which the connection failed.
            </summary>
      <param name="endPoint">
            The remote endpoint to which the connection failed.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ConnectionFailedException.Address">
      <summary>
            Gets the IPv4 address of the device to which the connection failed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ConnectionFailedException.Message">
      <summary>
            Gets the message that describes the current exception.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ConnectionFailedException.Port">
      <summary>
            Gets the port that the connection was attempted on.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Epoch">
      <summary>
            Represents an Epoch (Unix) time value. Epoch (Unix) time is defined as
            being the number of seconds elapsed since January 1, 1970 (known as the
            epoch).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Epoch.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Epoch</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Epoch.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Epoch</b>
            class with the Epoch (Unix time) value.
            </summary>
      <param name="value">
            The number of seconds elapsed since the epoch.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Epoch.FromDateTime(System.DateTime)">
      <summary>
            Converts a <see cref="T:System.DateTime" /> value into an Epoch value.
            </summary>
      <param name="date">
            The value to convert.
            </param>
      <returns>
            A new Epoch based on the provided <see cref="T:System.DateTime" />. If the
            specified date is null, then null is returned.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Epoch.Now">
      <summary>
            Gets the Epoch time (Unix time) based on the current date and time.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Epoch.Parse(System.String)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:CyrusBuilt.ControlByWeb.Epoch.Parse(System.String)"]</p>
      </summary>
      <param name="input">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="input"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.Epoch.Parse(System.String)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:CyrusBuilt.ControlByWeb.Epoch.Parse(System.String)"]</p>
      </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Epoch.ToDateTime">
      <summary>
            Converts the current Epoch instance into a <see cref="T:System.DateTime" /> value.
            </summary>
      <returns>
            A <see cref="T:System.DateTime" /> representation of this Epoch time instance.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Epoch.ToString">
      <summary>
            Returns as <see cref="T:System.String" /> that represents the current
            <see cref="T:CyrusBuilt.ControlByWeb.Epoch" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current
            <see cref="T:CyrusBuilt.ControlByWeb.Epoch" />.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Epoch.TryParse(System.String,CyrusBuilt.ControlByWeb.Epoch@)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:CyrusBuilt.ControlByWeb.Epoch.TryParse(System.String,CyrusBuilt.ControlByWeb.Epoch@)"]</p>
      </summary>
      <param name="input">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="input"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.Epoch.TryParse(System.String,CyrusBuilt.ControlByWeb.Epoch@)"]</p>
      </param>
      <param name="epoch">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="epoch"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.Epoch.TryParse(System.String,CyrusBuilt.ControlByWeb.Epoch@)"]</p>
      </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:CyrusBuilt.ControlByWeb.Epoch.TryParse(System.String,CyrusBuilt.ControlByWeb.Epoch@)"]</p>
      </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Epoch.Value">
      <summary>
            Gets the value of the Epoch time (number of seconds elapsed).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.IResetable">
      <summary>
            Provides a contract for resetting an object or component instance.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.IResetable.Reset">
      <summary>
            Reset this instance.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.ModuleBase">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "T:CyrusBuilt.ControlByWeb.ModuleBase"]</p>
      </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.ModuleBase" /> class</summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor(System.Net.IPAddress)">
      <summary>Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.ModuleBase" /> class</summary>
      <param name="ipAddr">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="ipAddr"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor(System.Net.IPAddress)"]</p>
      </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.ModuleBase" /> class</summary>
      <param name="ipAddr">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="ipAddr"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor(System.Net.IPAddress,System.Int32)"]</p>
      </param>
      <param name="port">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="port"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor(System.Net.IPAddress,System.Int32)"]</p>
      </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor(System.Net.IPEndPoint)">
      <summary>Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.ModuleBase" /> class</summary>
      <param name="endpoint">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="endpoint"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.ModuleBase.#ctor(System.Net.IPEndPoint)"]</p>
      </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ModuleBase.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ModuleBase.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.ModuleBase.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ModuleBase.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ModuleBase.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ModuleBase.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ModuleBase.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.ModuleBase.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.PeriodUnits">
      <summary>
            Defines periods of time for an event to occur.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PeriodUnits.Seconds">
      <summary>
            The period is in seconds.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PeriodUnits.Minutes">
      <summary>
            The period is in minutes.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PeriodUnits.Hours">
      <summary>
            The period is in hours.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PeriodUnits.Days">
      <summary>
            The period is in days.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PeriodUnits.Weeks">
      <summary>
            The period is in weeks.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PeriodUnits.Disabled">
      <summary>
            Event is disabled.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.PowerUpFlag">
      <summary>
            Component power loss indicator flags.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PowerUpFlag.Off">
      <summary>
            Indicates normal operation for a given power up indicator state.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.PowerUpFlag.On">
      <summary>
            Indicates power loss for a give power up indicator state.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.RebootState">
      <summary>
            Provides possible states of the automatic reboot controller.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.RebootState.AutoRebootOff">
      <summary>
            This indicates that the user has turned the auto reboot feature off.
            Note that the auto reboot feature will automatically be re-enabled if
            power is lost and restored to the WebRelay(tm).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.RebootState.Pinging">
      <summary>
            The WebRelay(tm) is periodically pinging the device. This indicates
            normal operation.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.RebootState.WaitingForResponse">
      <summary>
            This indicates that a ping request has been sent out and WebRelay(tm)
            is waiting for a reply from the device.  Under normal circumstances,
            the device reply very quickly and there will be no time for this
            state to be used.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.RebootState.Rebooting">
      <summary>
            The WebRelay(tm) is currently performing a reboot. This may be a
            single pulse or two pulses with a delay between them depending upon
            how the WebRelay(tm) is configured.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.RebootState.WaitingForBoot">
      <summary>
            After power-up, a WebRelay(tm) will wait for the device to boot
            before sending any ping requests.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.TemperatureUnits">
      <summary>
            The unit of measure for temperature.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.TemperatureUnits.Fahrenheit">
      <summary>
            Temperature measured in degress Fahrenheit.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.TemperatureUnits.Celcius">
      <summary>
            Temperature measured in degrees Celcius.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
      <summary>
            The exception that is thrown when a connection to a device is not authorized.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.UnauthorizedAccessException.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.UnauthorizedAccessException</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.UnsupportedMethodException">
      <summary>
            An exception that is thrown when a method is called by user code that
            the developer does not intend to be called. This could indicate that
            the method is only meant to be called by other methods in the same
            scope or to mark a method that is not yet safe to be implemented. This
            is particularly helpful for methods that are still being developed or
            are in alpha/beta stage.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.UnsupportedMethodException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.UnsupportedMethodException</b>
            with the name or signature of the method that is throwing this
            exception.
            </summary>
      <param name="methodName">
            The name or signature of the method that is throwing this exception.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.UnsupportedMethodException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.UnsupportedMethodException</b>
            with the name or signature of the method that is throwing this
            exception and the reason the method throws this exception.
            </summary>
      <param name="methodName">
            The name or signature of the method that is throwing this exception.
            </param>
      <param name="reason">
            The reason the method throws this exception.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.UnsupportedMethodException.MethodName">
      <summary>
            Gets the name or signature of the method that is throwing this
            exception.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.UnsupportedMethodException.Reason">
      <summary>
            Gets the reason the method throws this exception.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput">
      <summary>
            An implementation of <see cref="T:CyrusBuilt.ControlByWeb.Inputs.AnalogInput" /> specific to the 
            ControlByWeb Analog Module. This implementation adds the
            <see cref="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput.IsOutOfRange" /> property used to indicate that the input
            value has exceeded the maximum allowed by the Analog Module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput</b>
            class with the input value.
            </summary>
      <param name="value">
            The input value.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput.#ctor(System.Double,CyrusBuilt.ControlByWeb.Inputs.AnalogInputModes)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput</b>
            class with the input value and mode.
            </summary>
      <param name="value">
            The input value.
            </param>
      <param name="mode">
            The mode of this input.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput.IsOutOfRange">
      <summary>
            Gets whether or not the input value is greater than the maximum
            allowed (<see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_INPUT_VALUE" />).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput.ToString">
      <summary>
            Converts the current value instance to a string.
            </summary>
      <returns>
            A string representation of the current instance value.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants">
      <summary>
            Value constants specific to the Analog Module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.ERR_OUT_OF_RANGE">
      <summary>
            The input state returned by the device when the input value is out
            of range (valid range is 0 to 5 volts).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_INPUT_ID">
      <summary>
            The maximum input ID value (7).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_INPUT_VALUE">
      <summary>
            The maximum readable value on any given input (5V).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_RESOLUTION">
      <summary>
            The highest resolution (in bits) that the analog-to-digital
            converter can convert at (24.6).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MIN_INPUT_ID">
      <summary>
            The minimum input ID value (0).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.TOTAL_INPUTS">
      <summary>
            The total number of inputs the module has (8).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController">
      <summary>
            Used to monitor and control a ControlByWeb Analog Module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController</b>
            class with the IP address of the module to control and the port to 
            communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.GetState">
      <summary>
            Gets the state of the device.
            </summary>
      <returns>
            An object containing information about the state of the device.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address is
            not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.OnPolled(CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventArgs)">
      <summary>
            Raises the polled event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.OnPollFailed(CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventArgs)">
      <summary>
            Raises the poll failed event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.Polled">
      <summary>
            Occurs when the device state is polled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.PollFailed">
      <summary>
            Occurs polling the device state fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleController.SetResolution(System.Double)">
      <summary>
            Sets the resolution of the analog-to-digital converter (ADC).
            </summary>
      <param name="resolution">
            The resolution (in bits) to set. Must not be greater than
            <see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_RESOLUTION" />. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_RESOLUTION" />.
            </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="resolution" /> is greater than 
            <see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_RESOLUTION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address is
            not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventArgs">
      <summary>
            Analog module poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventArgs" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventArgs" /> 
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollEventHandler">
      <summary>
            Analog module poll event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventArgs">
      <summary>
            Analog module poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventArgs" />
            class.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventArgs" />
            class with the exception that is the cause of the poll failure.
            </summary>
      <param name="ex">
            The exception that is the cause of the poll cycle failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModulePollFailedEventHandler">
      <summary>
            Analog module poll failed event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState">
      <summary>
            Represents the state of a ControlByWeb Analog Module device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.AnalogModule</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Clone">
      <summary>
            Clones this state instance to a new duplicate instance using a deep
            copy of the current instance.
            </summary>
      <returns>
            A duplicate (but separate) copy of this state instance.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.GetInput(System.Int32)">
      <summary>
            Gets the input at the specified ID.
            </summary>
      <param name="inputNum">
            The ID of the input to get.
            </param>
      <returns>
            The requested input, or null if <paramref name="inputNum" /> is invalid.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input0">
      <summary>
            Gets the analog input at ID zero.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input1">
      <summary>
            Gets the analog input at ID one.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input2">
      <summary>
            Gets the analog input at ID two.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input3">
      <summary>
            Gets the analog input at ID three.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input4">
      <summary>
            Gets the analog input at ID four.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input5">
      <summary>
            Gets the analog input at ID five.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input6">
      <summary>
            Gets the analog input at ID six.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Input7">
      <summary>
            Gets the analog input at ID seven.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.PowerUp">
      <summary>
            Gets whether or not the device experienced a loss of power.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Reset">
      <summary>
            Resets the state values back to default.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.Resolution">
      <summary>
            Gets or sets the resolution of the analog-to-digital converter
            (ADC). Default is <see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_RESOLUTION" />.
            </summary>
      <exception cref="T:System.ArgumentException">
            value cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_RESOLUTION" />
            bits.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.SetOrOverrideInput(System.Int32,CyrusBuilt.ControlByWeb.Daq.AnalogModule.AMInput)">
      <summary>
            Explicitly sets or overrides the specified input.
            </summary>
      <param name="inputNum">
            The ID of the input to set.
            </param>
      <param name="input">
            The input to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputNum" /> must be an integer value from 
            <see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MIN_INPUT_ID" /> to <see cref="F:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleConstants.MAX_INPUT_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.SetOrOverridePowerUpState(CyrusBuilt.ControlByWeb.PowerUpFlag)">
      <summary>
            Explicitly sets or overrides the state of the power up flag,
            indicating whether or not the device experienced power loss.
            </summary>
      <param name="powerUp">
            The flag value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState.ToString">
      <summary>
            Converts the current instance of <see cref="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState" />
            to a string.
            </summary>
      <returns>
            The string representation of the current <see cref="T:CyrusBuilt.ControlByWeb.Daq.AnalogModule.AnalogModuleState" />
            instance.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimConstants">
      <summary>
            Value constants specific to the Five Input Module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimConstants.TOTAL_STANDARD_INPUTS">
      <summary>
            The total number of standard inputs the Five Input Module has
            (which is 5.... obviously).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventArgs">
      <summary>
            FiveInputModule poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventArgs" />
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventArgs" />
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventHandler">
      <summary>
            FiveInputModule poll event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventArgs">
      <summary>
            FiveInputModule poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventArgs" />
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventArgs" />
            class with the exception that is the cause of the failure.
            </summary>
      <param name="ex">
            The exception that is the cause of the failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventHandler">
      <summary>
            FiveInputModule poll failed event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController">
      <summary>
            Used to monitor and control a Five Input Module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController</b>
            class with the IP address of the module to control and the port to 
            communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.ClearAllCounters">
      <summary>
            Clears the counters for all inputs.
            </summary>
      <returns>
            If successful, the state of the client after the device recieved
            the command. If no response is recieved from the device, null
            is returned.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.ClearCounter(System.Int32)">
      <summary>
            Clears the counter for the specified input.
            </summary>
      <param name="input">
            Which input counter to clear.
            </param>
      <returns>
            If successful, the state of the client after the device recieved
            the command. If no response is recieved from the device, null
            is returned.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Counter number is less than one or greater than five.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.ClearPowerUpFlag">
      <summary>
            Clears the power up flag.
            </summary>
      <returns>
            If successful, the state of the client after the device recieved
            the command. If no response is recieved from the device, null
            is returned.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.GetState">
      <summary>
            Connects to the device and gets its current state.
            </summary>
      <returns>
            If successful, returns a new FiveInputModule state object containing
            the device's current state. Returns null if no response received
            from the device 
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.OnPolled(CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollEventArgs)">
      <summary>
            Raises the polled event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.OnPollFailed(CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FimPollFailedEventArgs)">
      <summary>
            Raises the poll failed event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.Polled">
      <summary>
            Occurs when the FiveInputModule is polled for status.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.PollFailed">
      <summary>
            Occurs when polling the device fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.PollInterval">
      <summary>
            Gets or sets the poll interval (in seconds).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleController.ResetAllStates">
      <summary>
            Resets all states to their defaults.
            </summary>
      <returns>
            If successful, the state of the client after the device recieved
            the command. If no response is recieved from the device, null
            is returned.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState">
      <summary>
            The state of a ControlByWeb Five Input Module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.Clone">
      <summary>
            Clones this state instance to a new duplicate instance using a deep
            copy of the current instance.
            </summary>
      <returns>
            A duplicate (but separate) copy of this state instance.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.GetInput(System.Int32)">
      <summary>
            Convenience method for getting an input reference by number.
            </summary>
      <param name="inputNum">
            The number of the input to get.
            </param>
      <returns>
            The requested input.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            inputNum must be an integer value not less than one and not greater
            than five (because there are excactly five inputs).
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.Input1">
      <summary>
            Gets or sets the first input a Five Input Module.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.Input2">
      <summary>
            Gets or sets the second input of a Five Input Module.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.Input3">
      <summary>
            Gets or sets the third input of a Five Input Module.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.Input4">
      <summary>
            Gets or sets the four input of a Five Input Module.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.Input5">
      <summary>
            Gets or sets the five input of Five Input Module.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.PowerUp">
      <summary>
            Gets or sets whether or not there was a loss of power.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.Reset">
      <summary>
            Resets the state values back to default.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState.ToString">
      <summary>
            Converts the current instance of <see cref="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState" />
            to a string.
            </summary>
      <returns>
            The string representation of the current <see cref="T:CyrusBuilt.ControlByWeb.Daq.FiveInputModule.FiveInputModuleState" />
            instance.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController">
      <summary>
            Used to monitor and control a ControlByWeb Temperature Module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController</b>
            class.  This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController</b>
            class with the IP address of the module to control and the port to communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.AddOrReplaceSensorInput(System.Int32)">
      <summary>
            Adds a sensor to the specified input. If the specified input is
            null (stateless) a new <see cref="T:CyrusBuilt.ControlByWeb.Inputs.SensorInput" /> will be created
            and a applied to the specified input with the sensor enabled.
            </summary>
      <param name="inputNum">
            The number identifying the input to add the sensor to.
            </param>
      <returns>
            The current state of the device.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            inputNum must be an integer value of 1 - 4.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address is
            not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.GetState">
      <summary>
            Connects to the device and gets its current state.
            </summary>
      <returns>
            If successful, returns a new WebRelay state object containing
            the device's current state. Returns null if no response received
            from the device.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address is
            not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.OnPolled(CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventArgs)">
      <summary>
            Raises the TemperatureModule polled event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.OnPollFailed(CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventArgs)">
      <summary>
            Raises the TemperatureModule poll failed event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.Polled">
      <summary>
            Occurs when the TemperatureModule device state is polled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.PollFailed">
      <summary>
            Occurs when polling the device fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.PollInterval">
      <summary>
            Gets or sets the poll interval (in seconds).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.PulseRelay(System.Int32)">
      <summary>
            Pulses a relay for the default amount of time (1.5 seconds).
            Pulsing the relay temporarily switches the relay on and back off
            again.
            </summary>
      <param name="relayNum">
            The relay number to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be either 1 or 2.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address is
            not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulses a relay for the specified amount of time. Pulsing the relay
            temporarily switches the relay on and back off again.
            </summary>
      <param name="relayNum">
            The relay number to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay. Default is
            <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PULSE_TIME" /> and the maximum allowable
            value is <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />. If the specified
            value is less than 0.1, then the default will be used instead.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be either 1 or 2.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address is
            not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleController.SetState(CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState)">
      <summary>
            Sets the state of the Temperature module device.
            </summary>
      <param name="state">
            The state to commit to the device.
            </param>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address is
            not defined.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            command cannot be null or empty.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventArgs">
      <summary>
            The TemperatureModule poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventArgs</b>
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollEventHandler">
      <summary>
            Handles the TemperatureModule poll event.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventArgs">
      <summary>
            The TemperatureModule poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventArgs</b>
            class with the exception that is the cause of the poll failure.
            </summary>
      <param name="ex">
            The exception that is the cause of the poll failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the poll failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModulePollFailedEventHandler">
      <summary>
            Handles the TemperatureModule poll failed event.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState">
      <summary>
            The state of a ControlByWeb Temperature Module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Clone">
      <summary>
            Clones this state instance to a new duplicate instance using a deep
            copy of the current instance.
            </summary>
      <returns>
            A duplicate (but separate) copy of this state instance.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.GetInput(System.Int32)">
      <summary>
            Convenience method for getting an input reference by number.
            </summary>
      <param name="inputNumber">
            The number of the input to get.
            </param>
      <returns>
            The requested input.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            inputNumber must be an integer value not less than one and not
            greater than four (because there are exactly four inputs).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.GetRelay(System.Int32)">
      <summary>
            Convenience method for getting a relay reference by number.
            </summary>
      <param name="relayNum">
            The number of the relay to get.
            </param>
      <returns>
            The requested relay.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value not less than one and not greater
            than two (because there are exactly two relays).
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Input1">
      <summary>
            Gets or sets the first input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Input2">
      <summary>
            Gets or sets the second input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Input3">
      <summary>
            Gets or sets the third input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Input4">
      <summary>
            Gets or sets the fourth input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Relay1">
      <summary>
            Gets or sets the state of relay 1.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Relay2">
      <summary>
            Gets or sets the state of relay 2.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Reset">
      <summary>
            Resets the state values back to default.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.ToString">
      <summary>
            Converts the current instance of <see cref="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState" />
            to a string.
            </summary>
      <returns>
            The string representation of the current <see cref="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState" />
            instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TemperatureModuleState.Units">
      <summary>
            Gets or sets the unit of measure for the temperature.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TempModuleConstants">
      <summary>
            Value constants specific to the Temperature Module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TempModuleConstants.TOTAL_RELAYS">
      <summary>
            The total number of relays the Temperature module has.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.TemperatureModule.TempModuleConstants.TOTAL_SENSOR_INPUTS">
      <summary>
            The total number of sensor inputs the Temperature module has.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.FanMode">
      <summary>
            Fan operation modes.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.FanMode.On">
      <summary>
            The fan is always on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.FanMode.Auto">
      <summary>
            The fan will run automatically as needed.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode">
      <summary>
            Available heat modes (temperature regulation modes).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode.Off">
      <summary>
            System is off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode.HeatOnly">
      <summary>
            System is heating only.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode.CoolOnly">
      <summary>
            System is cooling only.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode.Auto">
      <summary>
            System will heat or cool automatically as needed.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants">
      <summary>
            Value constants specific to the X-300 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.DEFAULT_FILTER_CHANGE_DAYS">
      <summary>
            The default number of days before a filter change.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.FAN_MODE_AUTO">
      <summary>
            Fan works automatically (1).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.FAN_MODE_ON">
      <summary>
            Fan is always on (0).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.FILTER_RST">
      <summary>
            The command value to reset the the filter count. 
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.HEAT_MODE_AUTO">
      <summary>
            System will heat or cool depending on ambient temperature (3).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.HEAT_MODE_COOLONLY">
      <summary>
            System is cooling (2).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.HEAT_MODE_HEATONLY">
      <summary>
            System is heating (1).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.HEAT_MODE_OFF">
      <summary>
            System off (0).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.HOLD_TOGGLE">
      <summary>
            The command value to hold the current set temperature. Essentially
            toggles the 7 day programming on/off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.MIN_TEMP_ABSOLUTE">
      <summary>
            The absolute bare-minimum allowable temperature that can be set.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.MODE_TEMPERATUREMONITOR">
      <summary>
            Device is in temperature monitor mode (7).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.MODE_THERMOSTAT">
      <summary>
            Device is in thermostat mode (6).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.TOTAL_INPUTS">
      <summary>
            The total number of inputs the X-300 has.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.TOTAL_RELAYS">
      <summary>
            The total number of relays the X-300 has.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics">
      <summary>
            Used to store diagnostic information about a ControlByWeb X-300 module.
            The properties in this class are meant to be read-only. So if the
            values MUST be changed (such as by a method that is retrieving the
            diagnostic info), then you must call the appropriate method for 
            explicitly setting the value.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.Internal5Volt">
      <summary>
            Gets the DC voltage of the internal 5V power supply.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.InternalTemperature">
      <summary>
            Gets the internal temperature if the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.Reset">
      <summary>
            Resets the state of this instance. This will return all property
            values back to their initial default values.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.SetInternalTemp(System.Double)">
      <summary>
            Explicitly sets the internal temperature of the device.
            </summary>
      <param name="temp">
            The temperature to set. This value must be greater than or equal to
            0.0 or it will be ignored.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.SetInternalVoltage(System.Double)">
      <summary>
            Explicitly sets the voltage of the internal 6 volt power supply.
            </summary>
      <param name="volts">
            The voltage to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.SetVoltageIn(System.Double)">
      <summary>
            Explicitly sets the voltage being applied to the VIn+ and VIn-
            terminals.
            </summary>
      <param name="volts">
            The voltage to set.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics.VoltageIn">
      <summary>
            Gets the DC voltage applied to the VIn+ and VIn- terminals.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController">
      <summary>
            Used to monitor and control a ControlyByWeb X-300 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController</b>
            class with the IP address of the module to control and the port to communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ChangeFanMode(CyrusBuilt.ControlByWeb.Daq.X300Module.FanMode)">
      <summary>
            Changes the fan mode.  This controller must be in
            thermostat mode. See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <param name="mode">
            The fan mode to set.
            </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ChangeMode(CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode)">
      <summary>
            Changes the operational mode of the controller.
            </summary>
      <param name="mode">
            The mode to change to.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ClearDevicePowerUpFlag">
      <summary>
            Clears the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ClearMemPowerUpFlag">
      <summary>
            Clears the internal memory power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ClearPowerLossCounter">
      <summary>
            Clears the power loss counter.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ClearPowerUpFlags">
      <summary>
            Clears both the memory power up flag and the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.GetDiagnostics">
      <summary>
            Gets diagnostic information from the device.
            </summary>
      <returns>
            If successful, a <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Diagnostics" /> state object
            containing diagnostic information specific to the device;
            Otherwise, null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.GetTempMonitorState">
      <summary>
            Gets the temperature monitor state if <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is
            <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.TemperatureMonitor" />.
            </summary>
      <returns>
            If successful, the state of the temperature monitor; Otherwise,
            null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.TemperatureMonitor" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.GetThermostatState">
      <summary>
            Gets the temperature monitor state if <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is
            <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />.
            </summary>
      <returns>
            If successful, the state of the thermostat; Otherwise, null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Hold">
      <summary>
            Hold the current set temperature on the device. Essentially, this
            toggles 7-day programming on/off.  This controller must be in
            thermostat mode. See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode">
      <summary>
            Gets the current mode of the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.OnPolled(CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs)">
      <summary>
            Raises the X-300 polled event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.OnPollFailed(CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs)">
      <summary>
            Raises the X-300 poll failed event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Polled">
      <summary>
            Occurs when the X-300 device status is polled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.PollFailed">
      <summary>
            Occurs when polling the device fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.PollInterval">
      <summary>
            Gets or sets the poll interval (in seconds).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.PulseRelay(System.Int32)">
      <summary>
            Pulses a relay for the default amount of time. Pulsing the relay
            temporarily switches the relay on and back off again. This 
            controller must be in temperature monitor mode. See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <param name="relayNum">
            The relay number to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value greater than or equal to 1 or
            less than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.TOTAL_RELAYS" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.TemperatureMonitor" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulses a relay for the specified amount of time. Pulsing the relay
            temporarily switches the relay on and back off again. This 
            controller must be in temperature monitor mode. See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <param name="relayNum">
            The relay number to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay. Default is
            <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PULSE_TIME" /> and the maximum allowable
            value is <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />. If the specified
            value is less than 0.1, then the default will be used instead.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value greater than or equal to 1 or
            less than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.TOTAL_RELAYS" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.TemperatureMonitor" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.ResetFilterCounter">
      <summary>
            Resets the filter counter back to the filter change interval. This
            will only reset the filter counter once the counter has reached
            zero. This controller must be in thermostat mode. 
            See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.SetHeatMode(CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode)">
      <summary>
            Sets the heat mode on the device. This controller must be in
            thermostat mode. See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <param name="mode">
            The heat mode to set.
            </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.SetRelay(System.Int32,CyrusBuilt.ControlByWeb.Relays.Relay)">
      <summary>
            Sets the state of a specified relay.
            </summary>
      <param name="relayNum">
            The relay number to set.
            </param>
      <param name="rel">
            The relay object to apply.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value greater than or equal to 1 or
            less than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.TOTAL_RELAYS" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.TemperatureMonitor" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.SetTemperature(System.Double)">
      <summary>
            Sets the set temperature on the device. This controller must be in
            thermostat mode. See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.SetThermostat(CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState)">
      <summary>
            Sets the thermostat. Only certain values of the specified state can
            be committed to the device (SetTemperature, HeatMode, Holding,
            FanMode, and FilterResetRequested). This controller must be in 
            thermostat mode. See <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" />.
            </summary>
      <param name="state">
            The state of the thermostat to set. 
            </param>
      <exception cref="T:System.ArgumentNullException">
            state cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController.Mode" /> is not <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />
            - or - The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode">
      <summary>
            Operation modes for the X-300 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat">
      <summary>
            The device will operate like a high-end digital thermostat.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.TemperatureMonitor">
      <summary>
            The module will act more like a thermometer, used mostly to monitor
            temperatures and monitor/control relay states.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs">
      <summary>
            The X-300 poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs</b>
            class with the temperature monitor state.
            </summary>
      <param name="tempMonState">
            The temperature monitor state.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs</b>
            class with the thermostat state.
            </summary>
      <param name="thermoState">
            The thermostat state.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.Mode">
      <summary>
            Gets the mode the device is currently operating in.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.TemperatureMonitorState">
      <summary>
            Gets the state of the temperature monitor. Returns null if
            <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.Mode" /> is <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.Thermostat" />.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.ThermostatState">
      <summary>
            Gets the state of the thermostat. Returns null if <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventArgs.Mode" />
            is <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode.TemperatureMonitor" />.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollEventHandler">
      <summary>
            Handles the X-300 poll event.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs">
      <summary>
            The X-300 poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode,System.Exception)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs</b>
            class with the mode the device is operating in and the exception
            that is the cause of the poll failure.
            </summary>
      <param name="mode">
            The operational mode of the device.
            </param>
      <param name="ex">
            The exception that is the cause of the poll failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the failure.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventArgs.Mode">
      <summary>
            Gets the operational mode of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300PollFailedEventHandler">
      <summary>
            Handles the X-300 poll failure event.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState">
      <summary>
            The state of a ControlByWeb X-300 module when in temperature monitor
            mode.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.Clone">
      <summary>
            Creates a new X300TempMonitorState that is a deep copy of the
            current instance.
            </summary>
      <returns>
            A new X300TempMonitorState that is a copy of this instance.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.GetRelay(System.Int32)">
      <summary>
            Convenience method for getting a relay reference by number.
            </summary>
      <param name="relayNum">
            The number of the relay to get.
            </param>
      <returns>
            The requested relay.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value not less than one and not greater
            than three (because there are exactly three relays).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.GetSensorInput(System.Int32)">
      <summary>
            Convenience method for getting a sensor input reference by number.
            </summary>
      <param name="inputNum">
            The number of the input to get.
            </param>
      <returns>
            The requested input.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            inputNum must be an integer value not less than one and not greater
            than eight (because there are exactly eight inputs).
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.Mode">
      <summary>
            Get the current mode of operation for the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.Relay1">
      <summary>
            Gets or sets the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.Relay2">
      <summary>
            Gets or sets the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.Relay3">
      <summary>
            Gets or sets the third relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.Reset">
      <summary>
            Resets the state values back to the defaults.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput1">
      <summary>
            Gets the first sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput2">
      <summary>
            Gets the second sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput3">
      <summary>
            Gets the third sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput4">
      <summary>
            Gets the fourth sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput5">
      <summary>
            Gets the fifth sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput6">
      <summary>
            Gets the sixth sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput7">
      <summary>
            Gets the seventh sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SensorInput8">
      <summary>
            Gets the eighth sensor input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SetSensorInput(System.Int32,CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Explicitly sets or overrides the specified input.
            </summary>
      <param name="input">
            The number of the input to set.
            </param>
      <param name="sensor">
            The sensor input to assign to the specified input.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            input must be an integer value not less than one and not greater
            than eight (because there are exactly eight inputs).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.SetTemperatureUnits(CyrusBuilt.ControlByWeb.TemperatureUnits)">
      <summary>
            Explicitly sets or overrides the unit of measure to be used for
            measuring temperature.
            </summary>
      <param name="units">
            The unit of measure to use for temperature (Celcius or Fahrenheit).
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300TempMonitorState.Units">
      <summary>
            Gets the unit of measure for the temperature.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState">
      <summary>
            The state of a ControlByWeb X-300 module when in thermostat mode.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Clone">
      <summary>
            Creates a new X300ThermostatState that is a deep copy of the
            current instance.
            </summary>
      <returns>
            A new X300ThermostatState that is a copy of this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Cool">
      <summary>
            Gets the current state of the cool relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Fan">
      <summary>
            Gets the current state of the fan relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.FanMode">
      <summary>
            Gets or sets the fan mode.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.FilterChangeInDays">
      <summary>
            Gets the number of days until the filter should be changed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.FilterResetRequested">
      <summary>
            Gets whether or not a filter counter reset was requested.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Heat">
      <summary>
            Gets the current state of the heat relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.HeatMode">
      <summary>
            Gets or sets the heat mode (temperature regulation mode).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Holding">
      <summary>
            Gets whether or not the device is currently holding the set
            temperature. This is used by <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ModuleController" />
            to determine if it should hold the set temp when setting
            the state of the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.HoldTemp">
      <summary>
            Hold the set temperature.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.IndoorTemperature">
      <summary>
            Gets the indoor temperature.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Max24HourTempReading">
      <summary>
            Gets the maximum temperature reading for the last 24 hours.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MaxSetTemperature">
      <summary>
            Gets the maximum allowable temperature that can be set.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MaxYesterdayTempReading">
      <summary>
            Gets the maximum temperature reading for yesterday.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Min24HourTempReading">
      <summary>
            Gets the minimum temperature reading for the last 24 hours.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MinSetTemperature">
      <summary>
            Gets the minimum allowable temperature that can be set.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MinYesterdayTempReading">
      <summary>
            Gets the minimum temperature reading for yesterday.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Mode">
      <summary>
            Gets the current operational mode of the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.OutdoorTemperature">
      <summary>
            Gets the outdoor temperature.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.ReleaseHold">
      <summary>
            Release the hold on the set temperature.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.RequestFilterReset(System.Boolean)">
      <summary>
            Request a filter counter reset.
            </summary>
      <param name="requesting">
            true to request a filter counter reset, false to cancel the request.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Reset">
      <summary>
            Resets the state back to its default values.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Serial">
      <summary>
            Gets the serial number (MAC address) of the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetCool(CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Explicitly sets or overrides the state of the cool relay.
            </summary>
      <param name="state">
            The relay state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetFan(CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Explicitly sets or overrides the state of the fan relay.
            </summary>
      <param name="state">
            The relay state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetFilterChangeDays(System.Int32)">
      <summary>
            Explicityly sets or overrides the number of days until the filter
            should be changed.
            </summary>
      <param name="days">
            The number of days until the filter should be changed.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetHeat(CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Explicitly sets or overrides the state of the heat relay.
            </summary>
      <param name="state">
            The relay state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetIndoorTemperature(System.Double)">
      <summary>
            Explicitly sets or overrides the indoor temperature value.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetMax24HourTemp(System.Double)">
      <summary>
            Explicitly sets or overrides the maximum temperature reading for
            the last 24 hours.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetMaximumSetTemp(System.Double)">
      <summary>
            Explicitly sets or overrides the maximum allowable temperature to
            set.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetMaxYesterdayTemp(System.Double)">
      <summary>
            Explicitly sets or overrides the maximum temperature reading for
            yesterday.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetMin24HourTemp(System.Double)">
      <summary>
            Explicitly sets or overrides the minimum temperature reading for
            the last 24 hours.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetMinimumSetTemp(System.Double)">
      <summary>
            Explicitly sets or overrides the minimum allowable temperature to
            set.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetMinYesterdayTemp(System.Double)">
      <summary>
            Explicitly sets or overrides the minimum temperature reading for
            yesterday.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetOutdoorTemperature(System.Double)">
      <summary>
            Explicitly sets or overrides the outdoor temperature value.
            </summary>
      <param name="temp">
            The temperature to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetSerial(System.Net.NetworkInformation.PhysicalAddress)">
      <summary>
            Explicitly sets or overrides the device's serial number.
            </summary>
      <param name="serial">
            The serial number (MAC address) to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetSerial(System.String)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The string containing the serial to set.
            </param>
      <exception cref="T:System.FormatException">
        <paramref name="serial" /> could not be parsed into a valid
            <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> (serial).
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetTemperature">
      <summary>
            Gets or sets the temperature to regulate to. When setting this value,
            the valid range must be with the <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MinSetTemperature" /> and
            <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MaxSetTemperature" /> values.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is not within <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MinSetTemperature" />
            and <see cref="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.MaxSetTemperature" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetTemperatureUnits(CyrusBuilt.ControlByWeb.TemperatureUnits)">
      <summary>
            Explicitly sets the unit of measure to be used for measuring
            temperature.
            </summary>
      <param name="units">
            The unit of measure to use for temperature (Celcius or Fahrenheit).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetTime(CyrusBuilt.ControlByWeb.Epoch)">
      <summary>
            Explicitly sets or overrides the Epoch (Unix) time value.
            </summary>
      <param name="time">
            The Epoch (Unix) time.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.SetTime(System.Int64)">
      <summary>
            Explicitly sets or overrides the Epoch (Unix) time value.
            </summary>
      <param name="seconds">
            The number of seconds elapsed since January 1, 1970 (epoch).
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Time">
      <summary>
            Gets the time displayed in "epoch time" (Unix time - number of
            seconds since January 1, 1970).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X300Module.X300ThermostatState.Units">
      <summary>
            Gets the unit of measure being used for temperature.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Utils">
      <summary>
            Utility methods specific to the X-300 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Utils.GetFanMode(System.Int32)">
      <summary>
            Gets the appropriate <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.FanMode" /> associated with the
            specified code.
            </summary>
      <param name="mode">
            An integer value associated with the requested mode.
            </param>
      <returns>
            The fan mode associated with the specified code.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            mode must be either <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.FAN_MODE_ON" />
            or <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.FAN_MODE_AUTO" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Utils.GetFanModeCode(CyrusBuilt.ControlByWeb.Daq.X300Module.FanMode)">
      <summary>
            Gets the integer value associated with the specified
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.FanMode" />.
            </summary>
      <param name="mode">
            The mode to get the code of.
            </param>
      <returns>
            The code associated with the specified mode.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Utils.GetHeadModeCode(CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode)">
      <summary>
            Gets the integer value associated with the specified heat mode.
            </summary>
      <param name="mode">
            The mode to get the value of.
            </param>
      <returns>
            The value associated with the specified mode. See the heat mode
            constants in <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants" /> for possible return values.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Utils.GetHeatMode(System.Int32)">
      <summary>
            Gets the appropriate <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.HeatMode" /> associated with the
            specified code.
            </summary>
      <param name="mode">
            The value of the mode to get. See the heat mode constants in
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants" /> for possible values.
            </param>
      <returns>
            The appropriate heat mode.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            mode must be an integer value not less than zero and not greater
            than three.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Utils.GetOperationMode(System.Int32)">
      <summary>
            Gets the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode" /> from the specified code.
            </summary>
      <param name="mode">
            Must be either <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.MODE_THERMOSTAT" /> or
            <see cref="F:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Constants.MODE_TEMPERATUREMONITOR" />.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode" /> associated with the specified value.
            </returns>
      <exception cref="T:System.ArgumentException">
            mode is invalid.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X300Module.X300Utils.GetOperationModeCode(CyrusBuilt.ControlByWeb.Daq.X300Module.X300OperationMode)">
      <summary>
            Gets the integer value code associated with the specified mode.
            </summary>
      <param name="mode">
            The mode to get the value of.
            </param>
      <returns>
            The code associated with the specified mode.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action">
      <summary>
            Defines possible actions for the X-301 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.TurnRelayOn">
      <summary>
            Turn the relay on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.TurnRelayOff">
      <summary>
            Turn the relay off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.PulseRelay">
      <summary>
            Pulse the relay.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.ToggleRelay">
      <summary>
            Toggle the relay (on, then off).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.None">
      <summary>
            No action.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants">
      <summary>
            X301 constants.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_CLEAR_EXT_VAR0">
      <summary>
            Clear external variable zero (8).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_DISABLE_EVENTS">
      <summary>
            Disable events (5).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_ENABLE_EVENTS">
      <summary>
            Enable events (6).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_NONE">
      <summary>
            No action (0).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_RELAY_OFF">
      <summary>
            Turn relay(s) off (2).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_RELAY_ON">
      <summary>
            Turn relay(s) on (1).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_RELAY_PULSE">
      <summary>
            Pulse relay (3).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_RELAY_TOGGLE">
      <summary>
            Toggle relay (4).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_CODE_SET_EXT_VAR0">
      <summary>
            Set external variable zero (7).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_PULSE_RELAY">
      <summary>
            Pulse the relay.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_RELAY_OFF">
      <summary>
            Turn the relay off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_RELAY_ON">
      <summary>
            Turn the relay on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.ACTION_TOGGLE_RELAY">
      <summary>
            Toggle the relay (on, then off).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.EXT_VAR_MAX_ID">
      <summary>
            The maximum external variable ID.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.EXT_VAR_MIN_ID">
      <summary>
            The minimum external variable ID.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.TOTAL_INPUTS">
      <summary>
            The total number of inputs in the X-301 module (2).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.TOTAL_RELAYS">
      <summary>
            The total number of relays in the X-301 module (2).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Diagnostics">
      <summary>
            Used to store diagnostic information about a ControlByWeb X-301 module.
            The properties in this class are meant to be read-only. So if the
            values MUST be changed (such as by a method that is retrieving the
            diagnostic info), then you must call the appropriate method for 
            explicitly setting the value.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Diagnostics.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301Diagnostics</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event">
      <summary>
            An event generated by the X-301 module. Note that this event object
            should be read-only by user code, so all properties contain getters
            only. You can use the set methods to explicitly to set or override the
            values if necessary (such as from methods that populate the properties
            with values parsed from a response from the device).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Action">
      <summary>
            Gets the action applied to this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Active">
      <summary>
            Indicates whether or not this event is active.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.AlwaysOn">
      <summary>
            Gets whether or not this event is always on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Count">
      <summary>
            Gets the number of remaining times the event will occur. If this
            property is zero and the event is active, then the event is always
            on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.CurrentTime">
      <summary>
            Gets the current date and time as reported by the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Description">
      <summary>
            Gets or sets the description of the event.
            </summary>
      <exception cref="T:System.ArgumentException">
            value is greater than <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.DESCRIPTION_MAX_LENGTH" />
            in length.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.DisableEvent">
      <summary>
            Convenience method for disabling this event.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Equals(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event
            is equal to the current instance.
            </summary>
      <param name="evt">
            The CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event to compare to
            the current instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event
            is equal to the current CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event; 
            otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Id">
      <summary>
            Gets the ID of this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.IsDisabled">
      <summary>
            Gets whether or not this event is disabled.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.NextEvent">
      <summary>
            Gets the date and time when this event will occur next.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Period">
      <summary>
            For events that occur more than one time, this property indicates the
            period of the event (time between occurrences). The unit of time is
            indicated after the value (seconds(s), minutes(m), hours(h), days(d),
            or weeks(w)). If this property is set to 0, then the event has been
            disabled. For example, 1d would be a period of one day.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.PulseDuration">
      <summary>
            Gets the time (in seconds) at the relay (output) will be turned on
            (if <see cref="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Action" /> is <see cref="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.PulseRelay" />).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.RelayNumber">
      <summary>
            Gets the relay number (output) the event will apply to (1 or 2).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Reset">
      <summary>
            Resets all state values back to their defaults except for
            <see cref="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Id" /> because the ID of the event instance should never
            change during the lifetime of the event unless there is need to 
            override the ID for some reason.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverrideAction(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action)">
      <summary>
            Sets or overrides the action being applied.
            </summary>
      <param name="action">
            The action to apply to the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverrideActiveState(System.Boolean)">
      <summary>
            Sets or overrides the current active state.
            </summary>
      <param name="active">
            Whether or not the state should be active.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverrideCount(System.Int32)">
      <summary>
            Sets or overrides the number of remaining times this event will
            occur.
            </summary>
      <param name="count">
            The number of times the this event will occur. If this field is set
            to zero and the event is active, then this event is always on.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverrideCurrentTime(System.DateTime)">
      <summary>
            Sets or overrides the current time as reported by the device.
            </summary>
      <param name="time">
            The date/time to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverrideId(System.Int32)">
      <summary>
            Sets or overrides the ID of this event.
            </summary>
      <param name="id">
            The ID to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            id must be a value between <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID" />
            and <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverrideNextEvent(System.DateTime)">
      <summary>
            Sets or overrides the time that the next event will occur.
            </summary>
      <param name="eventTime">
            The time of the next event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverridePeriod(System.String)">
      <summary>
            Sets or overrides the period of the event (time between occurrences).
            </summary>
      <param name="period">
            The unit of time is indicated after the value (seconds(s), 
            minutes(m), hours(h), days(d), or weeks(w)). Setting this to "0"
            will disable the event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverridePulseDuration(System.Double)">
      <summary>
            Sets or overrides the pulse duration (in seconds) if <see cref="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.Action" />
            is set to <see cref="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.PulseRelay" />.
            </summary>
      <param name="pulse">
            The duration in seconds to pulse the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event.SetOrOverrideRelay(System.Int32)">
      <summary>
            Sets or overrides the ID of the relay that the action applies to.
            </summary>
      <param name="relayId">
            The relay number the action applies to.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayId must be either 1 or 2.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection">
      <summary>
            A collection of X-301 events.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.Add(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            Adds an <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> to the collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> to add.
            </param>
      <returns>
            The position into which the new <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> was
            inserted.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Adding another event would exceed the current capacity of the
            collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.Contains(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            Determines whether or not the collection contains a specific
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" />.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> to locate in the collection.
            </param>
      <returns>
        <b>true</b> if the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> is found in the
            collection; Otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.CopyTo(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event[],System.Int32)">
      <summary>
            Copies the elements of the collection to a <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" />
            array, starting at a particular array index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> array that is the
            destination of the elements copied from the collection.  The
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> array must have zero-based indexing.
            </param>
      <param name="index">
            The zero-based index in the array at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
            array is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
            array is multidimensional. -or- The number of elements in the
            source array is greater than the available space from index to the
            end of the destination array.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.Exists(System.Int32)">
      <summary>
            Convenience method for determining if a specific event exists in
            the collection.
            </summary>
      <param name="id">
            The ID of the event to search for.
            </param>
      <returns>
            true if the event exists; Otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.GetEventById(System.Int32)">
      <summary>
            Gets an <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> from the collection by ID.
            </summary>
      <param name="id">
            The ID of the event to locate.
            </param>
      <returns>
            If successful, the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> with the matching ID;
            Otherwise, null.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.IndexOf(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            Determines the index of a specific <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> in the
            collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> to locate in the collection.
            </param>
      <returns>
            The index of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> if found in the collection;
            Otherwise, -1.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.Insert(System.Int32,CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            Inserts a new <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> into the collection at the
            specified index.
            </summary>
      <param name="index">
            The zero-based index at which the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> should be
            inserted.
            </param>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is not a valid index in the collection.
            </exception>
      <exception cref="T:System.NullReferenceException">
            evt is a null reference in the collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.IsNullOrEmpty(CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection)">
      <summary>
            Determines if the specified <b>X301EventCollection</b> is null or
            is an empty collection.
            </summary>
      <param name="events">
            The <b>X301EventCollection</b> to check.
            </param>
      <returns>
        <b>true</b> if the collection is null or empty; Otherwise,
            <b>false</b>.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> to get or set.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> at the specified index.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.Remove(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            Removes the first occurrence of a specified <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" />
            from the collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event" /> to remove from the collection.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301EventCollection.Replace(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event,CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            Replaces a given event with another. If the event being replaced
            does not exist or the replacement is null. This does nothing.
            </summary>
      <param name="current">
            The event to replace.
            </param>
      <param name="replacement">
            The replacement event. If the replacement event already exists in
            the collection, it will be ignored.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController">
      <summary>
            Used to monitor and control a ControlyByWeb X-301 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController</b>
            class with the IP address of the module to control and the port to communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.ClearDevicePowerUpFlag">
      <summary>
            Clears the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.ClearMemPowerUpFlag">
      <summary>
            Clears the internal memory power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.ClearPowerLossCounter">
      <summary>
            Clears the power loss counter.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.ClearPowerUpFlags">
      <summary>
            Clears both the memory power up flag and the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.GetDiagnostics">
      <summary>
            Gets diagnostic information from the device.
            </summary>
      <returns>
            If successful, a <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Diagnostics" /> state object
            containing diagnostic information specific to the device;
            Otherwise, null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.GetEvent(System.Int32)">
      <summary>
            Retrieves an event from the X-301 device.
            </summary>
      <param name="id">
            The ID of the event to retrive.
            </param>
      <returns>
            If successful, the requested event; Otherwise, null.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            id must be greater than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID" />
            and less than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.GetEvents">
      <summary>
            Gets a collection of events from the X-301 device.
            </summary>
      <returns>
            A collection of events retrieved from the device. If no events
            exist, then an empty collection is returned.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.GetState">
      <summary>
            Connects to the device and gets its current state.
            </summary>
      <returns>
            If successful, returns a new <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State" /> object containing
            the device's current state. Returns null if no response received
            from the device.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.OnPolled(CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventArgs)">
      <summary>
            Raises the X-301 polled event.
            </summary>
      <param name="e">
            The event args.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.OnPollFailed(CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventArgs)">
      <summary>
            Raises the X-301 poll failed event.
            </summary>
      <param name="e">
            The event args.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.Polled">
      <summary>
            Occurs when the device state is polled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.PollFailed">
      <summary>
            Occurs when polling the device state fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.PollInterval">
      <summary>
            Gets or sets the poll interval (in seconds).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.PulseRelay(System.Int32)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.ResetState">
      <summary>
            Resets the state of the X-301 module to its defaults.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.SetEvent(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Event)">
      <summary>
            DO NOT USE THIS METHOD AS IT IS NOT CURRENTLY FULLY SUPPORTED.
            </summary>
      <param name="evt">
            Null.
            </param>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnsupportedMethodException">
            A call to this method was made, which is currently unsupported.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.SetState(CyrusBuilt.ControlByWeb.Daq.X301Module.X301State)">
      <summary>
            Sets the state of the X-301 device.
            </summary>
      <param name="state">
            The state to set. This state is what will be committed to the device.
            </param>
      <exception cref="T:System.ArgumentNullException">
            state cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.SwitchRelayOff(System.Int32)">
      <summary>
             Convenience method for switching the specified relay off if it is
             not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch off.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301ModuleController.SwitchRelayOn(System.Int32)">
      <summary>
            Convenience method for switching the specified relay on if it is
            not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventArgs">
      <summary>
            The X-301 poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.X301Module.X301State)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventArgs</b>
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollEventHandler">
      <summary>
            The event handler for the X-301 poll event.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventArgs">
      <summary>
            The X-301 poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventArgs</b>
            class with the exception that is the cause of the poll failure.
            </summary>
      <param name="ex">
            The exception that is the cause of the poll failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the poll failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301PollFailedEventHandler">
      <summary>
            The event handler for the X-301 poll failed event.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State">
      <summary>
            The state of a ControlByWeb X-301 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State" />
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Clone">
      <summary>
            Creates a new X301State that is a deep copy of the current instance.
            </summary>
      <returns>
            A new X301State that is a copy of this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.ExtVar0">
      <summary>
            Gets the value of external variable zero.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.ExtVar1">
      <summary>
            Gets the value of external variable one.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.ExtVar2">
      <summary>
            Gets the value of external variable two.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.ExtVar3">
      <summary>
            Gets the value of external variable three.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.ExtVar4">
      <summary>
            Gets the value of external variable four.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.GetExternalVar(System.Int32)">
      <summary>
            Gets the value of an external variable.
            </summary>
      <param name="id">
            The ID of the external variable. Must be a value of <see cref="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.EXT_VAR_MIN_ID" />
            through <see cref="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Constants.EXT_VAR_MAX_ID" />.
            </param>
      <returns>
            The value of the requested external variable.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            id is invalid.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.HighTime1">
      <summary>
            Gets the amount of time elapsed, in seconds, since voltage was
            applied to the first input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.HighTime2">
      <summary>
            Gets the amount of time elapsed, in seconds, since voltage was
            applied to the second input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Input1">
      <summary>
            Gets the first input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Input2">
      <summary>
            Gets the second input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Relay1">
      <summary>
            Gets or sets the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Relay2">
      <summary>
            Gets or sets the second relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Reset">
      <summary>
            Resets all state values back to their defaults.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Serial">
      <summary>
            Gets the serial number (MAC address) of the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetExternalVar(System.Int32,System.Double)">
      <summary>
            Sets the value of an external variable.
            </summary>
      <param name="id">
            The ID of the external variable to set.
            </param>
      <param name="val">
            The value to assign to the external variable.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetExtVar0(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable zero.
            </summary>
      <param name="val">
            The value to assign.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetExtVar1(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable one.
            </summary>
      <param name="val">
            The value to assign
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetExtVar2(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable two.
            </summary>
      <param name="val">
            The value to assign.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetExtVar3(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable three.
            </summary>
      <param name="val">
            The value to assign.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetExtVar4(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable four.
            </summary>
      <param name="val">
            The value to assign.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetHighTime1(System.Double)">
      <summary>
            Explicitly sets or overrides the time elapsed, in seconds, since
            voltage was applied to input one.
            </summary>
      <param name="time">
            The time in seconds to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetHighTime2(System.Double)">
      <summary>
            Explicitly sets or overrides the time elapsed, in seconds, since
            voltage was applied to input two.
            </summary>
      <param name="time">
            The time in seconds to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetInput1(CyrusBuilt.ControlByWeb.Inputs.StandardInput)">
      <summary>
            Explicitly sets or overrides the first input.
            </summary>
      <param name="input">
            The input to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetInput2(CyrusBuilt.ControlByWeb.Inputs.StandardInput)">
      <summary>
            Explicitly sets or overrides the second input.
            </summary>
      <param name="input">
            The input to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetSerial(System.Net.NetworkInformation.PhysicalAddress)">
      <summary>
            Explicitly sets or overrides the device's serial number.
            </summary>
      <param name="serial">
            The serial number (MAC address) to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetSerial(System.String)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The string containing the serial to set.
            </param>
      <exception cref="T:System.FormatException">
        <paramref name="serial" /> could not be parsed into a valid
            <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> (serial).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetTime(CyrusBuilt.ControlByWeb.Epoch)">
      <summary>
            Explicitly sets or overrides the Epoch (Unix) time value.
            </summary>
      <param name="time">
            The Epoch (Unix) time.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.SetTime(System.Int64)">
      <summary>
            Explicitly sets or overrides the Epoch (Unix) time value.
            </summary>
      <param name="seconds">
            The number of seconds elapsed since January 1, 1970 (epoch).
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X301Module.X301State.Time">
      <summary>
            ets the time displayed in "epoch time" (Unix time - number of
            seconds since January 1, 1970).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Utils">
      <summary>
            X301 utils.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Utils.GetActionCode(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action)">
      <summary>
            Gets the value code associated with the specified action.
            </summary>
      <param name="action">
            The action to get the code from.
            </param>
      <returns>
            The value code associated with the specified action.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Utils.GetActionFromString(System.String)">
      <summary>
            Gets an <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action" /> from the specified string.
            </summary>
      <param name="input">
            The string to get the action from.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action" /> associated with the specified string;
            Otherwise, <see cref="F:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action.None" />.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X301Module.X301Utils.GetActionString(CyrusBuilt.ControlByWeb.Daq.X301Module.X301Action)">
      <summary>
            Converts an action into a string.
            </summary>
      <param name="action">
            The action to convert.
            </param>
      <returns>
            The string representation of the specified action.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions">
      <summary>
            Possible alarm conditions.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions.Normal">
      <summary>
            Alarm state is normal (off).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions.Alarm1">
      <summary>
            Alarm condition 1 (no further documentation from Xytronix as to
            what this condition actually means).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions.Alarm2">
      <summary>
            Alarm condition 2 (no further documentation from Xytronix as to
            what this condition actually means).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action">
      <summary>
            Defines possible event actions for the X-320 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.TurnRelayOn">
      <summary>
            Will turn the relay(s) on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.TurnRelayOff">
      <summary>
            Will turn the relay(s) off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.PulseRelay">
      <summary>
            Will pulse the relays(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.ToggleRelay">
      <summary>
            Will toggle the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.SetExtVar">
      <summary>
            Will set an external veriable.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.ClearExtVar">
      <summary>
            Will clear an external variable.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.ChangeSchedules">
      <summary>
            Will change schedules.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.None">
      <summary>
            No action will be performed.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants">
      <summary>
            Contains value constants specific to the X-320 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ACTION_CHANGE_SCHED">
      <summary>
            Change schedules.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ACTION_CLEAR_EXT_VAR">
      <summary>
            Clear external variable 0.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ACTION_PULSE_RELAY">
      <summary>
            Pulse the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ACTION_RELAY_OFF">
      <summary>
            Turn the relay(s) off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ACTION_RELAY_ON">
      <summary>
            Turn the relay(s) on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ACTION_SET_EXT_VAR">
      <summary>
            Set external variable 0.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ACTION_TOGGLE_RELAY">
      <summary>
            Toggle the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ALARM_COND_1">
      <summary>
            Alarm condition 1.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ALARM_COND_2">
      <summary>
            Alarm condition 2.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.ALARM_COND_NORMAL">
      <summary>
            Normal (off).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.TOTAL_ANALOG_INPUTS">
      <summary>
            Total number of analog inputs (4).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.TOTAL_EXT_VARS">
      <summary>
            Total number of external variables (4).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.TOTAL_IO">
      <summary>
            Total number of I/Os (2). Note: A relay is an output.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.TOTAL_RELAYS">
      <summary>
            The total number of relays in the X-320 module (2).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants.TOTAL_SENSOR_INPUTS">
      <summary>
            Total number of sensor inputs (6).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics">
      <summary>
            Used to store diagnostic information about a ControlByWeb X-320 module.
            The properties in this class are meant to be read-only. So if the
            values MUST be changed (such as by a method that is retrieving the
            diagnostic info), then you must call the appropriate method for 
            explicitly setting the value.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.Internal6Volt">
      <summary>
            Gets the DC voltage of the internal 6V power supply.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.InternalTemperature">
      <summary>
            Gets the internal temperature if the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.Reset">
      <summary>
            Resets the state of this instance. This will return all property
            values back to their initial default values.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.SetInternalTemp(System.Double)">
      <summary>
            Explicitly sets the internal temperature of the device.
            </summary>
      <param name="temp">
            The temperature to set. This value must be greater than or equal to
            0.0 or it will be ignored.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.SetInternalVoltage(System.Double)">
      <summary>
            Explicitly sets the voltage of the internal 6 volt power supply.
            </summary>
      <param name="volts">
            The voltage to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.SetVoltageIn(System.Double)">
      <summary>
            Explicitly sets the voltage being applied to the VIn+ and VIn-
            terminals.
            </summary>
      <param name="volts">
            The voltage to set.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics.VoltageIn">
      <summary>
            Gets the DC voltage applied to the VIn+ and VIn- terminals.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event">
      <summary>
            An event generated by the X-320 module. Note that this event object
            should be read-only by user code, so all properties contain getters
            only. You can use the set methods to explicitly set or override the
            values if necessary (such as from methods that populate the properties
            with values parsed from a response from the device).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Action">
      <summary>
            Gets the action applied to this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Active">
      <summary>
            Indicates whether or not this event is active.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.AlwaysOn">
      <summary>
            Gets whether or not this event is always on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Count">
      <summary>
            Gets the number of remaining times the event will occur. If this
            property is zero and the event is active, then the event is always
            on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.CurrentTime">
      <summary>
            Gets the current date and time as reported by the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.DisableEvent">
      <summary>
            Convenience method for disabling this event.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Equals(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event
            is equal to the current instance.
            </summary>
      <param name="evt">
            The CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event to compare to
            the current instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event
            is equal to the current CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event; 
            otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Id">
      <summary>
            Gets the ID of this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.IsDisabled">
      <summary>
            Gets whether or not this event is disabled.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.NextEvent">
      <summary>
            Gets the date and time when this event will occur next.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Period">
      <summary>
            For events that occur more than one time, this property indicates the
            period of the event (time between occurrences). The unit of time is
            indicated after the value (seconds(s), minutes(m), hours(h), days(d),
            or weeks(w)). If this property is set to 0, then the event has been
            disabled. For example, 1d would be a period of one day.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.PulseDuration">
      <summary>
            Gets the time (in seconds) at the relay (output) will be turned on
            (if <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Action" /> is <see cref="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.PulseRelay" />).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.RelayNumber">
      <summary>
            Gets the relay number (output) the event will apply to (1 or 2).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Reset">
      <summary>
            Resets all state values back to their defaults except for
            <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Id" /> because the ID of the event instance should never
            change during the lifetime of the event unless there is need to 
            override the ID for some reason.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverrideAction(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action)">
      <summary>
            Sets or overrides the action being applied.
            </summary>
      <param name="action">
            The action to apply to the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverrideActiveState(System.Boolean)">
      <summary>
            Sets or overrides the current active state.
            </summary>
      <param name="active">
            Whether or not the state should be active.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverrideCount(System.Int32)">
      <summary>
            Sets or overrides the number of remaining times this event will
            occur.
            </summary>
      <param name="count">
            The number of times the this event will occur. If this field is set
            to zero and the event is active, then this event is always on.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverrideCurrentTime(System.DateTime)">
      <summary>
            Sets or overrides the current time as reported by the device.
            </summary>
      <param name="time">
            The date/time to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverrideId(System.Int32)">
      <summary>
            Sets or overrides the ID of this event.
            </summary>
      <param name="id">
            The ID to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            id must be a value between <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID" />
            and <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverrideNextEvent(System.DateTime)">
      <summary>
            Sets or overrides the time that the next event will occur.
            </summary>
      <param name="eventTime">
            The time of the next event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverridePeriod(System.String)">
      <summary>
            Sets or overrides the period of the event (time between occurrences).
            </summary>
      <param name="period">
            The unit of time is indicated after the value (seconds(s), 
            minutes(m), hours(h), days(d), or weeks(w)). Setting this to "0"
            will disable the event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverridePulseDuration(System.Double)">
      <summary>
            Sets or overrides the pulse duration (in seconds) if <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.Action" />
            is set to <see cref="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.PulseRelay" />.
            </summary>
      <param name="pulse">
            The duration in seconds to pulse the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event.SetOrOverrideRelay(System.Int32)">
      <summary>
            Sets or overrides the ID of the relay that the action applies to.
            </summary>
      <param name="relayId">
            The relay number the action applies to.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayId must be either 1 or 2.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection">
      <summary>
            A collection of X-320 events.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.Add(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event)">
      <summary>
            Adds an <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> to the collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> to add.
            </param>
      <returns>
            The position into which the new <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> was
            inserted.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Adding another event would exceed the current capacity of the
            collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.Contains(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event)">
      <summary>
            Determines whether or not the collection contains a specific
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" />.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> to locate in the collection.
            </param>
      <returns>
        <b>true</b> if the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> is found in the
            collection; Otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.CopyTo(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event[],System.Int32)">
      <summary>
            Copies the elements of the collection to a <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" />
            array, starting at a particular array index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> array that is the
            destination of the elements copied from the collection.  The
            <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> array must have zero-based indexing.
            </param>
      <param name="index">
            The zero-based index in the array at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
            array is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
            array is multidimensional. -or- The number of elements in the
            source array is greater than the available space from index to the
            end of the destination array.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.Exists(System.Int32)">
      <summary>
            Convenience method for determining if a specific event exists in
            the collection.
            </summary>
      <param name="id">
            The ID of the event to search for.
            </param>
      <returns>
            true if the event exists; Otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.GetEventById(System.Int32)">
      <summary>
            Gets an <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> from the collection by ID.
            </summary>
      <param name="id">
            The ID of the event to locate.
            </param>
      <returns>
            If successful, the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> with the matching ID;
            Otherwise, null.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.IndexOf(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event)">
      <summary>
            Determines the index of a specific <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> in the
            collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> to locate in the collection.
            </param>
      <returns>
            The index of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> if found in the collection;
            Otherwise, -1.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.Insert(System.Int32,CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event)">
      <summary>
            Inserts a new <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> into the collection at the
            specified index.
            </summary>
      <param name="index">
            The zero-based index at which the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> should be
            inserted.
            </param>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is not a valid index in the collection.
            </exception>
      <exception cref="T:System.NullReferenceException">
            evt is a null reference in the collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.IsNullOrEmpty(CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection)">
      <summary>
            Determines if the specified <b>X320EventCollection</b> is null or
            is an empty collection.
            </summary>
      <param name="events">
            The <b>X320EventCollection</b> to check.
            </param>
      <returns>
        <b>true</b> if the collection is null or empty; Otherwise,
            <b>false</b>.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> to get or set.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> at the specified index.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.Remove(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event)">
      <summary>
            Removes the first occurrence of a specified <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" />
            from the collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event" /> to remove from the collection.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320EventCollection.Replace(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event,CyrusBuilt.ControlByWeb.Daq.X320Module.X320Event)">
      <summary>
            Replaces a given event with another. If the event being replaced
            does not exist or the replacement is null. This does nothing.
            </summary>
      <param name="current">
            The event to replace.
            </param>
      <param name="replacement">
            The replacement event. If the replacement event already exists in
            the collection, it will be ignored.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController">
      <summary>
            Used to monitor and control a ControlByWeb X-320 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ip">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController</b>
            class with the IP address of the module to control and the port to
            communicate with it on.
            </summary>
      <param name="ip">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.BeginPollCycle">
      <summary>
            Begins polling the device for status.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.ClearDevicePowerUpFlag">
      <summary>
            Clears the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.ClearMemPowerUpFlag">
      <summary>
            Clears the internal memory power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.ClearPowerLossCounter">
      <summary>
            Clears the power loss counter.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.ClearPowerUpFlags">
      <summary>
            Clears both the memory power up flag and the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.GetDiagnostics">
      <summary>
            Gets diagnostic information from the device.
            </summary>
      <returns>
            If successful, a <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Diagnostics" /> state object
            containing diagnostic information specific to the device;
            Otherwise, null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.GetEvent(System.Int32)">
      <summary>
            Retrieves an event from the X-320 device.
            </summary>
      <param name="id">
            The ID of the event to retrieve.
            </param>
      <returns>
            If successful, the requested event; Otherwise, null.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be greater than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID" />
            and less than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.GetEvents">
      <summary>
            Gets a collection of events from the X-320 device.
            </summary>
      <returns>
            A collection of events retrieved from the device. If no events
            exist, then an empty collection is returned.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.GetState">
      <summary>
            Gets the state of the X-320 device.
            </summary>
      <returns>
            If successful, the state of the device; Otherwise, null.
            </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.OnPolled(CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollEventArgs)">
      <summary>
            Raises the <see cref="E:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.Polled" /> event if a handler is attached.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.OnPollFailed(CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailedEventArgs)">
      <summary>
            Raises the <see cref="E:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.PollFailed" /> event if a handler is attached.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.Polled">
      <summary>
            Occurs when the device is successfully polled for status.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.PollFailed">
      <summary>
            Occurs when attempt to poll the device fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.PulseRelay(System.Int32)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.ResetState">
      <summary>
            Resets the state of the X-320 module to its defaults.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.SetState(CyrusBuilt.ControlByWeb.Daq.X320Module.X320State)">
      <summary>
            Commits the set to the device. Currently, only the relay states and
            counter values will be committed, all other values will be ignored.
            </summary>
      <param name="state">
            The state to commit to the device.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="state" /> cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.SwitchRelayOff(System.Int32)">
      <summary>
             Convenience method for switching the specified relay off if it is
             not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch off.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320ModuleController.SwitchRelayOn(System.Int32)">
      <summary>
            Convenience method for switching the specified relay on if it is
            not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollEventArgs">
      <summary>
            The X-320 device status poll event arguments class.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollEventArgs.#ctor(CyrusBuilt.ControlByWeb.Daq.X320Module.X320State)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollEventArgs</b>
            class with the state of the device. This is the default constructor.
            </summary>
      <param name="state">
            The state of the X-320 device being polled.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollEventArgs.State">
      <summary>
            Gets the state of the X-320 device being polled.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollEventHandler">
      <summary>
            Handles X-320 poll events.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailedEventArgs">
      <summary>
            The X-320 poll failed event arguments class.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailedEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailedEventArgs</b>
            class with the exception that is the cause of the poll failure.
            </summary>
      <param name="ex">
            The exception that is the cause of the poll failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the poll failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320PollFailEventHandler">
      <summary>
            Handles X-320 failure events.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State">
      <summary>
            Represents the state of an X-320 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Daq.X320Module.X320State</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.AssignAnalogInput(System.Int32,CyrusBuilt.ControlByWeb.Inputs.AnalogInput)">
      <summary>
            Assigns an analog input to the input at the specified ID.
            </summary>
      <param name="id">
            The ID to assign an input to. (Valid IDs are 1 - 4)
            </param>
      <param name="input">
            The input to assign to the specified ID.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be a valid ID (1 - 4).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.AssignAnalogInputAlarmCondition(System.Int32,CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions)">
      <summary>
            Sets an alarm condition for the specified analog input.
            </summary>
      <param name="id">
            The ID of the analog input to set the alarm condition for.
            </param>
      <param name="condition">
            The alarm condition to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be a valid ID (1 - 4).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.AssignSensorAlarmCondtion(System.Int32,CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions)">
      <summary>
            Assigns an alarm condition to the specified sensor input.
            </summary>
      <param name="id">
            The ID of the sensor input to assign the condition to.
            </param>
      <param name="condition">
            The alarm condition to assign to the specified sensor.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be a valid ID (1 - 6).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.AssignSensorInput(System.Int32,CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Assigns a sensor input to the specified input ID.
            </summary>
      <param name="id">
            The ID of the sensor input to assign.
            </param>
      <param name="sensor">
            The sensor to assign.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be a valid ID (1 - 6).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ChangeRawFrequency(System.Double)">
      <summary>
            Sets the raw signal frequency on the frequency input.
            </summary>
      <param name="frequency">
            The frequency value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ChangeRelayHighTime(System.Int32,System.Double)">
      <summary>
            Changes the duration (in seconds) that the specified relay was last
            held in the ON state.
            </summary>
      <param name="relayNum">
            The relay number to change.
            </param>
      <param name="highTime">
            The amount of time (in seconds) to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> must be either 1 or 2.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ChangeRelayTransitionCount(System.Int32,System.Int32)">
      <summary>
            Changes the number of times the specified relay transition states
            from OFF to ON.
            </summary>
      <param name="relayNum">
            The relay number to change.
            </param>
      <param name="count">
            The number of times the transition occurred.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> must be either 1 or 2.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ChangeScaledFrequency(System.Double)">
      <summary>
            Sets the scaled frequency reading on the frequency input.
            </summary>
      <param name="frequency">
            The frequency value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ChangeSerial(System.Net.NetworkInformation.PhysicalAddress)">
      <summary>
            Changes the serial number (MAC address) of the device.
            </summary>
      <param name="serial">
            The serial number to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ChangeSerial(System.String)">
      <summary>
            Changes the serial number (MAC address) of the device.
            </summary>
      <param name="serial">
            The string containing the serial to set.
            </param>
      <exception cref="T:System.FormatException">
        <paramref name="serial" /> could not be parsed into a valid
            <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> (serial).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ChangeTemperatureUnitOfMeasure(CyrusBuilt.ControlByWeb.TemperatureUnits)">
      <summary>
            Changes the unit of measurement for temperature readings.
            </summary>
      <param name="units">
            The unit of measure to use.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ExternalVariable0">
      <summary>
            Gets the value of the external variable at ID: 0.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ExternalVariable1">
      <summary>
            Gets the value of the external variable at ID: 1.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ExternalVariable2">
      <summary>
            Gets the value of the external variable at ID: 2.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ExternalVariable3">
      <summary>
            Gets the value of the external variable at ID: 3.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.FrequencyAlarm">
      <summary>
            Gets the current condition of the frequency alarm.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.GetAnalogInput(System.Int32)">
      <summary>
            Gets an analog input by ID.
            </summary>
      <param name="id">
            The ID of the input to get (valid IDs are 1 - 4).
            </param>
      <returns>
            If successful, the analog input at the specified ID; Otherwise, null.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.GetAnalogInputAlarmCondition(System.Int32)">
      <summary>
            Gets the alarm condition for the specified analog input.
            </summary>
      <param name="id">
            The ID of the analog input to get the alarm condition of.
            </param>
      <returns>
            The alarm condition for the specified analog input.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be a valid ID (1 - 4).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.GetExternalVariableValue(System.Int32)">
      <summary>
            Gets the value of an external variable by ID.
            </summary>
      <param name="id">
            The ID of the external variable to get the value of (valid IDs are
            0 - 3).
            </param>
      <returns>
            If successful, the value of the external variable;
            Otherwise, -1.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.GetSensorAlarmCondition(System.Int32)">
      <summary>
            Gets the alarm condition for the specified sensor input.
            </summary>
      <param name="id">
            The ID of the sensor input to get the alarm condition of.
            </param>
      <returns>
            The alarm condition for the specified sensor.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be a valid ID (1 - 6).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.GetSensorInput(System.Int32)">
      <summary>
            Gets a sensor input by ID.
            </summary>
      <param name="id">
            The ID of the sensor input to get (valid IDs are 1 - 6).
            </param>
      <returns>
            If successful, the sensor input at the specified ID; Otherwise, null.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.HighTime1">
      <summary>
            Gets the duration (in seconds) that the first relay was last held
            in the ON state.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.HightTime2">
      <summary>
            Gets the duration (in seconds) that the second relay was last held
            in the OFF state.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Input1">
      <summary>
            Gets the first analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Input2">
      <summary>
            Gets the second analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Input3">
      <summary>
            Gets the third analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Input4">
      <summary>
            Gets the fourth analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.InputAlarm1">
      <summary>
            Gets the alarm condition for the first analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.InputAlarm2">
      <summary>
            Gets the alarm condition for the second analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.InputAlarm3">
      <summary>
            Gets the alarm condition for the third analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.InputAlarm4">
      <summary>
            Gets the alarm condition for the fourth analog input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Multiplier">
      <summary>
            Gets or sets the multiplier (slope).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.RawFrequency">
      <summary>
            Gets the raw signal frequency from the frequency input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Relay1">
      <summary>
            Gets or sets the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Relay2">
      <summary>
            Gets or sets the second relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Reset">
      <summary>
            Resets the state back to its original values.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ScaledCount1">
      <summary>
            Gets the scaled transition count value for relay one. This is
            computed as <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.TransitionCount1" /> * <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Multiplier" /> + <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Offset" />.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ScaledCount2">
      <summary>
            Gets the scaled transition count value for relay two. This is
            computed as <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.TransitionCount2" /> * <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Multiplier" /> + <see cref="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Offset" />.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.ScaledFrequency">
      <summary>
            Gets the scaled frequency reading from the frequency input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Sensor1">
      <summary>
            Gets the first sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Sensor2">
      <summary>
            Gets the second sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Sensor3">
      <summary>
            Gets the third sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Sensor4">
      <summary>
            Gets the fourth sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Sensor5">
      <summary>
            Gets the fifth sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Sensor6">
      <summary>
            Gets the sixth sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SensorAlarm1">
      <summary>
            Gets the alarm condition for sensor one.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SensorAlarm2">
      <summary>
            Gets the alarm condition for sensor two.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SensorAlarm3">
      <summary>
            Gets the alarm condition for sensor three.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SensorAlarm4">
      <summary>
            Gets the alarm condition for sensor four.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SensorAlarm5">
      <summary>
            Gets the alarm condition for sensor five.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SensorAlarm6">
      <summary>
            Gets the alarm condition for sensor six.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Serial">
      <summary>
            Gets the serial number (physical address) of the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SetExternalVariableValue(System.Int32,System.Double)">
      <summary>
            Sets the value of the specified external variable.
            </summary>
      <param name="id">
            The ID of the external variable to set.
            </param>
      <param name="value">
            The value to assign to the external variable.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be a valid ID (0 - 3).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SetFrequencyAlarmCondition(CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions)">
      <summary>
            Sets an alarm condtion on the frequency input.
            </summary>
      <param name="condition">
            The alarm condition to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.SetTime(CyrusBuilt.ControlByWeb.Epoch)">
      <summary>
            Changes the device time.
            </summary>
      <param name="time">
            A value in Epoch (UNIX) time.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Time">
      <summary>
            Gets the Epoch time as reported by the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.TransitionCount1">
      <summary>
            The number of times relay one transitioned from OFF to ON.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.TransitionCount2">
      <summary>
            The number of times relay two transitioned from OFF to ON.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Daq.X320Module.X320State.Units">
      <summary>
            Gets the unit of measure for temperature.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Utils">
      <summary>
            Utility methods specific to the X-320 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Utils.GetActionFromString(System.String)">
      <summary>
            Gets an <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action" /> from the specified string.
            </summary>
      <param name="action">
            The string to get the action from.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action" /> associated with the specified string;
            Otherwise, <see cref="F:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action.None" />.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Utils.GetActionString(CyrusBuilt.ControlByWeb.Daq.X320Module.X320Action)">
      <summary>
            Converts an action into a string.
            </summary>
      <param name="action">
            The action to convert.
            </param>
      <returns>
            The string representation of the specified action.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Utils.GetAlarmCode(CyrusBuilt.ControlByWeb.Daq.X320Module.AlarmConditions)">
      <summary>
            Gets an alarm code from the specified condition.
            </summary>
      <param name="condition">
            The condition to get the code of.
            </param>
      <returns>
            The corresponding alarm code.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Utils.GetAlarmCondition(System.Int32)">
      <summary>
            Gets an alarm condition from the specified value.
            </summary>
      <param name="input">
            The value to get the associated alarm condition from.
            </param>
      <returns>
            The alarm condition associated with the specified value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            value must be of one of the alarm condition constants. See <see cref="T:CyrusBuilt.ControlByWeb.Daq.X320Module.X320Constants" />.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase">
      <summary>
            This is a base class for other diagnostics classes to abstract from
            for ControlByWeb devices that support diagnostic output.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase</b>
            class. This is the default protected constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.DevicePowerUpFlag">
      <summary>
            Gets the flag indicating a loss of power to the device itself.
            This can be set to <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_OFF" />. A
            value of <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_ON" /> means the X-320
            has lost power at least one time since the flag was set to
            <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_OFF" />.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.IncrementPowerLossCount">
      <summary>
            Increments the power loss count by one.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.MemoryPowerUpFlag">
      <summary>
            Gets the flag indicating a loss of power to the capacitor-backed
            real-time clock. A value of <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_ON" />
            indicates that the real-time clock lost power. This should only
            happen if the device has lost power for several days. There is
            an internal capacitor that can power the real-time clock for an
            extended period of time, even if the main power is lost. If the
            real-time clock loses power, the time will have to be reset. By
            default, this value will be <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_ON" />
            until it is set to <see cref="F:CyrusBuilt.ControlByWeb.Common.POWERUP_FLAG_OFF" />.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.PowerLossCount">
      <summary>
            Gets the count of how many times the X-320 has lost main power.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.Reset">
      <summary>
            Resets the state of this instance. This will return all property
            values back to their initial default values.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.ResetPowerLossCount">
      <summary>
            Resets the power loss count back to zero (default).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.SetDevicePowerUpFlag(CyrusBuilt.ControlByWeb.PowerUpFlag)">
      <summary>
            Explicitly sets the device power up flag state.
            </summary>
      <param name="state">
            The flag state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.SetMemoryPowerUpFlag(CyrusBuilt.ControlByWeb.PowerUpFlag)">
      <summary>
            Explicitly sets the memory power up flag state.
            </summary>
      <param name="state">
            The flag state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Diagnostics.DiagnosticsBase.SetPowerLossCount(System.Int32)">
      <summary>
            Explicitly sets the number of times the device has lost main power.
            </summary>
      <param name="count">
            The number of times the device has lost main power.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Events.EventConstants">
      <summary>
            Defines value constants specific to events.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.DESCRIPTION_MAX_LENGTH">
      <summary>
            The maximum length of an event description string.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID">
      <summary>
            The maximum allowable event ID value (99).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID">
      <summary>
            The minimum allowable event ID value (0).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.PERIOD_DAYS">
      <summary>
            The time period in days.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.PERIOD_DISABLED">
      <summary>
            The period is disabled.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.PERIOD_HOURS">
      <summary>
            The time period in hours.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.PERIOD_MINUTES">
      <summary>
            The time period in minutes.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.PERIOD_SECONDS">
      <summary>
            The time period in seconds.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.PERIOD_WEEKS">
      <summary>
            The time period in weeks.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Events.EventConstants.REPEAT_CONTINUOUS">
      <summary>
            Causes an event to repeat continuously.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Events.EventUtils">
      <summary>
            Static utility methods for events.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Events.EventUtils.GetPeriod(System.Int32)">
      <summary>
            Gets the period unit associated with the specified period code.
            </summary>
      <param name="period">
            The integer value associated with the requested period. See the
            period constants in <see cref="T:CyrusBuilt.ControlByWeb.Events.EventConstants" />. Any value not
            equal to one of the value constants will cause <see cref="F:CyrusBuilt.ControlByWeb.PeriodUnits.Disabled" />
            to be returned.
            </param>
      <returns>
            Returns the period unit associated with the specified value.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Events.EventUtils.GetPeriodCode(CyrusBuilt.ControlByWeb.PeriodUnits)">
      <summary>
            Gets an integer value code associated with the specified period
            unit.
            </summary>
      <param name="unit">
            The period unit to get the associated code of.
            </param>
      <returns>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:CyrusBuilt.ControlByWeb.Events.EventUtils.GetPeriodCode(CyrusBuilt.ControlByWeb.PeriodUnits)"]</p>
      </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Events.EventUtils.GetPeriodFromString(System.String)">
      <summary>
            Gets the period unit associated with the specified string.
            </summary>
      <param name="input">
            Specify "s" for seconds, "m" for minutes, "h" for hours, "d" for
            days, "w" for weeks, or "0" for disabled.
            </param>
      <returns>
            The period associated with the specified string. If an invalid
            string was specified, then returns <see cref="F:CyrusBuilt.ControlByWeb.PeriodUnits.Disabled" />.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Inputs.AnalogInput">
      <summary>
            Represents an analog input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.AnalogInput</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.AnalogInput</b>
            class with the input value.
            </summary>
      <param name="value">
            The input value.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.#ctor(System.Double,CyrusBuilt.ControlByWeb.Inputs.AnalogInputModes)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.AnalogInput</b>
            class with the input value and mode.
            </summary>
      <param name="value">
            The input value.
            </param>
      <param name="mode">
            The mode of this input.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.Equals(CyrusBuilt.ControlByWeb.Inputs.AnalogInput)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.Inputs.AnalogInput
            is equal to the current instance.
            </summary>
      <param name="input">
            The CyrusBuilt.ControlByWeb.Inputs.AnalogInput
            to compare to the current instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.Inputs.AnalogInput is equal to the current 
            CyrusBuilt.ControlByWeb.Inputs.AnalogInput; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.Inputs.AnalogInput; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.Mode">
      <summary>
            Gets the mode of this input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.Reset">
      <summary>
            Resets the state of this input back its default value.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.ToString">
      <summary>
            Converts the current value instance to a string.
            </summary>
      <returns>
            A string representation of the current instance value.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Inputs.AnalogInput.Value">
      <summary>
            Gets the input value.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Inputs.AnalogInputModes">
      <summary>
            Possible modes for an analog input.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Inputs.AnalogInputModes.SingleEnded">
      <summary>
            The input is being used in single-ended mode.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Inputs.AnalogInputModes.Differential">
      <summary>
            The input is being used in differential mode with the adjacent input.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Inputs.InputState">
      <summary>
            Defines possible states of an input.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Inputs.InputState.Off">
      <summary>
            Voltage is not being applied to the input.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Inputs.InputState.On">
      <summary>
            Voltage has been applied to the input.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Inputs.IOMode">
      <summary>
            Defines possible modes for a digital I/O.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Inputs.IOMode.Input">
      <summary>
            The I/O is in input mode.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Inputs.IOMode.Output">
      <summary>
            The I/O is in output mode.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Inputs.SensorInput">
      <summary>
            Represents a temperature sensor input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.SensorInput</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.SensorInput</b> class
            with the temperature reported by the sensor. By using this constructor, it is assumed that there is an
            digital temperature sensor associated with this input.
            </summary>
      <param name="temperature">
            The temperature reported by the sensor.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.AddSensor">
      <summary>
            Adds a sensor to the input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.AddSensor(System.Double)">
      <summary>
            Adds a sensor to the input.
            </summary>
      <param name="sensorTemp">
            The tempurature reported by the sensor.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.Equals(CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.Inputs.SensorInput
            is equal to the current instance.
            </summary>
      <param name="input">
            The CyrusBuilt.ControlByWeb.Inputs.SensorInput
            to compare to the current instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.Inputs.SensorInput is equal to the current 
            CyrusBuilt.ControlByWeb.Inputs.SensorInput; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.Inputs.SensorInput; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Inputs.SensorInput.HasSensor">
      <summary>
            Gets whether or not there is a digital temperature sensor associated with this input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.RemoveSensor">
      <summary>
            Removes the sensor from the input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.Reset">
      <summary>
            Convenience method that resets the current instance properties back 
            to their default values.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.SetTemperature(System.Double)">
      <summary>
            Sets the tempurature of the input.
            </summary>
      <param name="temperature">
            The temperature to set.
            </param>
      <exception cref="T:System.InvalidOperationException">
            An attempt was made to set the tempurature of an input that has no
            digital temperature sensor associated with it.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Inputs.SensorInput.Temperature">
      <summary>
            Gets the temperature reported by the sensor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.SensorInput.ToString">
      <summary>
            Returns as <see cref="T:System.String" /> that represents the current
            <see cref="T:CyrusBuilt.ControlByWeb.Inputs.SensorInput" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current
            <see cref="T:CyrusBuilt.ControlByWeb.Inputs.SensorInput" />.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Inputs.StandardInput">
      <summary>
            Represents an input on a ControlByWeb Five Input Module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.StandardInput</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.#ctor(CyrusBuilt.ControlByWeb.Inputs.InputState)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.StandardInput</b> class
            with the state of the input.
            </summary>
      <param name="state">
            The state of the input.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.#ctor(CyrusBuilt.ControlByWeb.Inputs.InputState,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Inputs.StandardInput</b> class
            with the state of the input and the number of times the input has been triggered.
            </summary>
      <param name="state">
            The state of the input.
            </param>
      <param name="triggerCount">
            The number of times the input has been triggered.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.ChangeState(CyrusBuilt.ControlByWeb.Inputs.InputState)">
      <summary>
            Changes the state of the input. If the input is currently off and is being triggered
            on, then the trigger count will increment by one.
            </summary>
      <param name="state">
            The state of the input (off or on).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.Equals(CyrusBuilt.ControlByWeb.Inputs.StandardInput)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.Daq.FiveInputModule.Input
            is equal to the current instance.
            </summary>
      <param name="moduleInput">
            The CyrusBuilt.ControlByWeb.Daq.FiveInputModule.Input
            to compare to the current instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.Daq.FiveInputModule.Input
            is equal to the current CyrusBuilt.ControlByWeb.Daq.FiveInputModule.Input;
            otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.Daq.FiveInputModule.Input; otherwise, 
            false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.Reset">
      <summary>
            Resets the state of the input (off) and trigger count.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.ResetTriggerCount">
      <summary>
            Resets the number of times the input has been triggered. This sets the value
            of <see cref="P:CyrusBuilt.ControlByWeb.Inputs.StandardInput.TriggerCount" /> back to zero.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Inputs.StandardInput.State">
      <summary>
            Gets the state of the input.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Inputs.StandardInput.Trigger">
      <summary>
            Triggers the input (on).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Inputs.StandardInput.TriggerCount">
      <summary>
            Gets the number of times the input has been triggered.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Relays.Relay">
      <summary>
            Represents a relay in a ControlByWeb module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Relays.Relay.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Relay</b> class.
            This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Relays.Relay.#ctor(CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Relay</b> class
            with the state of the relay.
            </summary>
      <param name="state">
            The state of the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Relays.Relay.#ctor(CyrusBuilt.ControlByWeb.Relays.RelayState,System.Double)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.Relay</b> class
            with the state of the relay and the pulse time in seconds. The pulse time
            is only useful when state is <see cref="F:CyrusBuilt.ControlByWeb.Relays.RelayState.Pulse" />.
            </summary>
      <param name="state">
            The state of the relay.
            </param>
      <param name="pulseTime">
            The duration of time (in seconds) to pulse the relay. Default is
            <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PULSE_TIME" /> seconds. Max allowable is
            <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" /> seconds.
            </param>
      <exception cref="T:System.ArgumentException">
            pulseTime must not exceed <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Relays.Relay.Equals(CyrusBuilt.ControlByWeb.Relays.Relay)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.Relay is
            equal to the current instance.
            </summary>
      <param name="rel">
            The CyrusBuilt.ControlByWeb.Relay to compare to the current
            instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.Relay is equal to the
            current CyrusBuilt.ControlByWeb.Relay; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Relays.Relay.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.Relay; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Relays.Relay.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Relays.Relay.PulseTime">
      <summary>
            Gets or sets the pulse time in seconds. Default is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PULSE_TIME" /> 
            seconds. Max allowable is <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />. 
            </summary>
      <exception cref="T:System.ArgumentException">
            value must not exceed <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Relays.Relay.Reset">
      <summary>
            Resets the relay back to its default state.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.Relays.Relay.State">
      <summary>
            Gets or sets the state of the Relay.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Relays.RelayState">
      <summary>
            Defines operational states of a relay.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Relays.RelayState.Off">
      <summary>
            The relay is not energized.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Relays.RelayState.On">
      <summary>
            The relay is energized.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Relays.RelayState.Pulse">
      <summary>
            The relay is pulsing from on to off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Relays.RelayState.Reboot">
      <summary>
            The relay is rebooting the device it is controlling.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Relays.RelayState.DisableAutoReboot">
      <summary>
            Automatic reboot disabled.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Relays.RelayState.EnableAutoReboot">
      <summary>
            Automatic reboot enabled.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.Relays.RelayState.Toggle">
      <summary>
            Toggles the state of the relay.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.Security.Crypto">
      <summary>
            Provides cryptographic utility methods.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.Base64Encode(System.String)">
      <summary>
            Encodes the specified input string using the Base64 algorithm.
            </summary>
      <param name="input">
            The string to convert.
            </param>
      <returns>
            A Base64-encoded string. If the input is null or empty,
            then an empty string is returned instead.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.ComparePasswordHash(System.Byte[],System.Byte[])">
      <summary>
            Compares 2 MD5 hash values to determine if they match.
            </summary>
      <param name="hash1">
            The first hash to compare (to hash2).
            </param>
      <param name="hash2">
            The second hash to compare (to hash1).
            </param>
      <returns>
            true if the hashes are equal; Otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.ConvertByteArrayToString(System.Byte[])">
      <summary>
            Convert a byte array into plain-text string.
            </summary>
      <param name="input">
            The byte array to convert.
            </param>
      <returns>
            The newly converted string value. If input is null
            or empty, returns an empty string.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.ConvertStringToByteArray(System.String)">
      <summary>
            Convert a plain-text string into a byte array.
            </summary>
      <param name="input">
            The string value to convert.
            </param>
      <returns>
            An array of bytes that comprise the string value. If input
            is null or empty, returns null instead.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.ConvertToPlainString(System.Security.SecureString)">
      <summary>
            Converts a <see cref="T:System.Security.SecureString" /> value into a plain-text string.
            </summary>
      <param name="input">
            The input to convert.
            </param>
      <returns>
            A plain-text version of the <see cref="T:System.Security.SecureString" />.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.ConvertToSecureString(System.String)">
      <summary>
            Converts a plain-text string into a read-only SecureString Datatype.
            </summary>
      <param name="plainString">
            The plain-text string to convert.
            </param>
      <returns>
            A new instance of <see cref="T:System.Security.SecureString" /> holding the converted string (read-only).
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.DecryptString(System.String)">
      <summary>
            Decrypts a string value that was encrypted by the <see cref="M:CyrusBuilt.ControlByWeb.Security.Crypto.EncryptString(System.String)" /> method.
            </summary>
      <param name="input">
            The encrypted string to decrypt.
            </param>
      <returns>
            The resulting decrypted string value.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.EncryptString(System.String)">
      <summary>
            Encrypts a string value using the Triple DES algorithm and an MD5 hash.
            </summary>
      <param name="plainString">
             The string value to encrypt.
            </param>
      <returns>
            The resulting encrypted string.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.Security.Crypto.GeneratePasswordHash(System.String,System.String,System.String)">
      <summary>
            Creates an MD5 hash from a plain-text Username and password, and specifed salt.
            </summary>
      <param name="username">
            The username to generate a hash from.
            </param>
      <param name="password">
            The plain-text password to generate a hash from.
            </param>
      <param name="salt">
            The "salt" or key.
            </param>
      <returns>
            An MD5 hash (byte array) containing the hash values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            None of the parameters can be null or empty.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action">
      <summary>
            Defines possible event actions for the WebRelay-10 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.TurnRelayOn">
      <summary>
            Will turn the relay(s) on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.TurnRelayOff">
      <summary>
            Will turn the relay(s) off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.PulseRelay">
      <summary>
            Will pulse the relays(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.ToggleRelay">
      <summary>
            Will toggle the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.SetExtVar">
      <summary>
            Will set an external veriable.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.ClearExtVar">
      <summary>
            Will clear an external variable.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.ChangeSchedules">
      <summary>
            Will change schedules.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.None">
      <summary>
            No action will be performed.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants">
      <summary>
            Value constants specific to the WebRelay10 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.ACTION_CHANGE_SCHED">
      <summary>
            Change schedules.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.ACTION_CLEAR_EXT_VAR">
      <summary>
            Clear external variable 0.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.ACTION_PULSE_RELAY">
      <summary>
            Pulse the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.ACTION_RELAY_OFF">
      <summary>
            Turn the relay(s) off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.ACTION_RELAY_ON">
      <summary>
            Turn the relay(s) on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.ACTION_SET_EXT_VAR">
      <summary>
            Set external variable 0.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.ACTION_TOGGLE_RELAY">
      <summary>
            Toggle the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.EXT_VAR_MAX_ID">
      <summary>
            The maximum external variable ID.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.EXT_VAR_MIN_ID">
      <summary>
            The minimum external variable ID.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.TOTAL_EXT_VARS">
      <summary>
            The total number of external variables supported by the WebRelay10 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.TOTAL_RELAYS">
      <summary>
            The total number of relays (10.... goes without saying really).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.TOTAL_SENSOR_INPUTS">
      <summary>
            The total number of sensor inputs in a WebRelay10 module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.TOTAL_STANDARD_INPUTS">
      <summary>
            The total number of standard inputs in a WebRelay10 module.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller">
      <summary>
            Used to monitor and control a ControlByWeb WebRelay-10 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller</b>
            class with the IP address of the module to control and the port to 
            communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.ChangeRelayState(System.Int32,CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Changes the state of the specified relay on the device.
            </summary>
      <param name="relayNum">
            The number of the relay to change the state of.
            </param>
      <param name="state">
            The state to set.
            </param>
      <returns>
            The current state of the device or null if no response received
            from device.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> is invalid. Must be an integer value of 1 - <see cref="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.TOTAL_RELAYS" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.ClearDevicePowerUpFlag">
      <summary>
            Clears the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.ClearMemPowerUpFlag">
      <summary>
            Clears the internal memory power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.ClearPowerLossCounter">
      <summary>
            Clears the power loss counter.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.ClearPowerUpFlags">
      <summary>
            Clears both the memory power up flag and the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.GetDiagnostics">
      <summary>
            Gets diagnostic information from the device.
            </summary>
      <returns>
            If successful, a <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State" /> state object
            containing diagnostic information specific to the device;
            Otherwise, null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.GetEvent(System.Int32)">
      <summary>
            Gets and event from the device.
            </summary>
      <param name="eventId">
            The ID of the event to retrieve.
            </param>
      <returns>
            An object containing details of the event.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.GetEvents">
      <summary>
            Gets a collection of all retrievable events from the device.
            </summary>
      <returns>
            A collection of all retrievable events from the device, or an empty
            collection if none are defined or unable to retrieve.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.GetState">
      <summary>
            Connects to the device and gets its current state.
            </summary>
      <returns>
            If successful, returns a new <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State" /> object containing
            the device's current state. Returns null if no response received
            from the device.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.OnPolled(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventArgs)">
      <summary>
            Raises the polled event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.OnPollFailed(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventArgs)">
      <summary>
            Raises the poll failed event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.Polled">
      <summary>
            Occurs when the device state is polled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.PollFailed">
      <summary>
            Occurs when polling the device state fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.PollInterval">
      <summary>
            Gets or sets the poll interval (in seconds).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.PulseRelay(System.Int32)">
      <summary>
            Pulses the specified relay for the default amount of time.
            Pulsing the relay temporarily switches the relay on and back off
            again.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> is invalid. Must be an integer value of 1 - <see cref="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.TOTAL_RELAYS" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulses the specified relay for the specified amount of time.
            Pulsing the relay temporarily switches the relay on and back off
            again.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> is invalid. Must be an integer value of 1 - <see cref="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Constants.TOTAL_RELAYS" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.ResetState">
      <summary>
            Resets the state of the WebRelay-10 device to its default values.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.SetState(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State)">
      <summary>
            Sets the state of WebRelay-10 device.
            </summary>
      <param name="state">
            The state to set. This state is what will be committed to the device.
            The only properties of the device's state that are affected are the
            relays themselves.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="state" /> cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.SwitchRelayOff(System.Int32)">
      <summary>
            Switches the specified relay off.
            </summary>
      <param name="relayNum">
            The number of the relay to switch off.
            </param>
      <returns>
            The current state of the device. If no response recieved from the
            device, then returns null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Controller.SwitchRelayOn(System.Int32)">
      <summary>
            Switches the specified relay on.
            </summary>
      <param name="relayNum">
            The number of the relay to switch on.
            </param>
      <returns>
            The current state of the device. If no response recieved from the
            device, then returns null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Diagnostics">
      <summary>
            Used to store diagnostic information about a ControlByWeb WebRelay-10
            module. The properties in this class are meant to be read-only. So if
            the values MUST be changed (such as by a method that is retrieving 
            the diagnostic info), then you must call the appropriate method for 
            explicitly setting the value.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Diagnostics.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Diagnostics</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event">
      <summary>
            An event generated by the WebRelay-10 module. Note that this event object
            should be read-only by user code, so all properties contain getters
            only. You can use the set methods to explicitly to set or override the
            values if necessary (such as from methods that populate the properties
            with values parsed from a response from the device).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Action">
      <summary>
            Gets the action applied to this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Active">
      <summary>
            Indicates whether or not this event is active.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.AlwaysOn">
      <summary>
            Gets whether or not this event is always on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Count">
      <summary>
            Gets the number of remaining times the event will occur. If this
            property is zero and the event is active, then the event is always
            on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.CurrentTime">
      <summary>
            Gets the current date and time as reported by the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.DisableEvent">
      <summary>
            Convenience method for disabling this event.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Equals(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event
            is equal to the current instance.
            </summary>
      <param name="evt">
            The CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event to compare to
            the current instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event
            is equal to the current CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event; 
            otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Id">
      <summary>
            Gets the ID of this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.IsDisabled">
      <summary>
            Gets whether or not this event is disabled.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.NextEvent">
      <summary>
            Gets the date and time when this event will occur next.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Period">
      <summary>
            For events that occur more than one time, this property indicates the
            period of the event (time between occurrences). The unit of time is
            indicated after the value (seconds(s), minutes(m), hours(h), days(d),
            or weeks(w)). If this property is set to 0, then the event has been
            disabled. For example, 1d would be a period of one day.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.PulseDuration">
      <summary>
            Gets the time (in seconds) at the relay (output) will be turned on
            (if <see cref="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Action" /> is <see cref="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.PulseRelay" />).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.RelayNumber">
      <summary>
            Gets the relay number (output) the event will apply to (1 or 2).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Reset">
      <summary>
            Resets all state values back to their defaults except for
            <see cref="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Id" /> because the ID of the event instance should never
            change during the lifetime of the event unless there is need to 
            override the ID for some reason.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverrideAction(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action)">
      <summary>
            Sets or overrides the action being applied.
            </summary>
      <param name="action">
            The action to apply to the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverrideActiveState(System.Boolean)">
      <summary>
            Sets or overrides the current active state.
            </summary>
      <param name="active">
            Whether or not the state should be active.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverrideCount(System.Int32)">
      <summary>
            Sets or overrides the number of remaining times this event will
            occur.
            </summary>
      <param name="count">
            The number of times the this event will occur. If this field is set
            to zero and the event is active, then this event is always on.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverrideCurrentTime(System.DateTime)">
      <summary>
            Sets or overrides the current time as reported by the device.
            </summary>
      <param name="time">
            The date/time to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverrideId(System.Int32)">
      <summary>
            Sets or overrides the ID of this event.
            </summary>
      <param name="id">
            The ID to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            id must be a value between <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID" />
            and <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverrideNextEvent(System.DateTime)">
      <summary>
            Sets or overrides the time that the next event will occur.
            </summary>
      <param name="eventTime">
            The time of the next event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverridePeriod(System.String)">
      <summary>
            Sets or overrides the period of the event (time between occurrences).
            </summary>
      <param name="period">
            The unit of time is indicated after the value (seconds(s), 
            minutes(m), hours(h), days(d), or weeks(w)). Setting this to "0"
            will disable the event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverridePulseDuration(System.Double)">
      <summary>
            Sets or overrides the pulse duration (in seconds) if <see cref="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.Action" />
            is set to <see cref="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.PulseRelay" />.
            </summary>
      <param name="pulse">
            The duration in seconds to pulse the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event.SetOrOverrideRelay(System.Int32)">
      <summary>
            Sets or overrides the ID of the relay that the action applies to.
            </summary>
      <param name="relayId">
            The relay number the action applies to.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayId must be either 1 or 2.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection">
      <summary>
            A collection of WebRelay10 module events.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.Add(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event)">
      <summary>
            Adds an <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> to the collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> to add.
            </param>
      <returns>
            The position into which the new <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> was
            inserted.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Adding another event would exceed the current capacity of the
            collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.Contains(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event)">
      <summary>
            Determines whether or not the collection contains a specific
            <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" />.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> to locate in the collection.
            </param>
      <returns>
        <b>true</b> if the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> is found in the
            collection; Otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.CopyTo(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event[],System.Int32)">
      <summary>
            Copies the elements of the collection to a <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" />
            array, starting at a particular array index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> array that is the
            destination of the elements copied from the collection.  The
            <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> array must have zero-based indexing.
            </param>
      <param name="index">
            The zero-based index in the array at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
            array is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
            array is multidimensional. -or- The number of elements in the
            source array is greater than the available space from index to the
            end of the destination array.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.Exists(System.Int32)">
      <summary>
            Convenience method for determining if a specific event exists in
            the collection.
            </summary>
      <param name="id">
            The ID of the event to search for.
            </param>
      <returns>
            true if the event exists; Otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.GetEventById(System.Int32)">
      <summary>
            Gets an <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> from the collection by ID.
            </summary>
      <param name="id">
            The ID of the event to locate.
            </param>
      <returns>
            If successful, the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> with the matching ID;
            Otherwise, null.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.IndexOf(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event)">
      <summary>
            Determines the index of a specific <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> in the
            collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> to locate in the collection.
            </param>
      <returns>
            The index of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> if found in the collection;
            Otherwise, -1.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.Insert(System.Int32,CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event)">
      <summary>
            Inserts a new <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> into the collection at
            the specified index.
            </summary>
      <param name="index">
            The zero-based index at which the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" />
            should be inserted.
            </param>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is not a valid index in the collection.
            </exception>
      <exception cref="T:System.NullReferenceException">
            evt is a null reference in the collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.IsNullOrEmpty(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection)">
      <summary>
            Determines if the specified <b>WebRelay10EventCollection</b> is null or
            is an empty collection.
            </summary>
      <param name="events">
            The <b>WebRelay10EventCollection</b> to check.
            </param>
      <returns>
        <b>true</b> if the collection is null or empty; Otherwise,
            <b>false</b>.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> to get or set.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> at the specified index.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.Remove(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event)">
      <summary>
            Removes the first occurrence of a specified <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" />
            from the collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event" /> to remove from the collection.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10EventCollection.Replace(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event,CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Event)">
      <summary>
            Replaces a given event with another. If the event being replaced
            does not exist or the replacement is null. This does nothing.
            </summary>
      <param name="current">
            The event to replace.
            </param>
      <param name="replacement">
            The replacement event. If the replacement event already exists in
            the collection, it will be ignored.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventArgs">
      <summary>
            WebRelay-10 poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventArgs" />
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventArgs.#ctor(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventArgs" /> 
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollEventHandler">
      <summary>
            WebRelay-10 poll event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The poll event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventArgs">
      <summary>
            WebRelay-10 poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventArgs" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventArgs" />
            class with the exception that caused the poll cycle to fail.
            </summary>
      <param name="ex">
            The exception that caused the poll cycle to fail.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10PollFailedEventHandler">
      <summary>
            WebRelay-10 poll failed event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The poll failure event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State">
      <summary>
            Represents the state of a WebRelay10 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Clone">
      <summary>
            Creates a new WebRelay10State that is a deep copy of the current instance.
            </summary>
      <returns>
            A WebRelay10State that is a copy of this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.ExtVar0">
      <summary>
            Gets the value of external variable zero.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.ExtVar1">
      <summary>
            Gets the value of external variable one.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.ExtVar2">
      <summary>
            Gets the value of external variable two.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.ExtVar3">
      <summary>
            Gets the value of external variable three.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.ExtVar4">
      <summary>
            Gets the value of external variable four.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.GetExternalVar(System.Int32)">
      <summary>
            Convenience method for getting the value of an external variable by
            ID.
            </summary>
      <param name="varId">
            The ID of the external variable to get the value of (0 - 4).
            </param>
      <returns>
            The value. Returns -1 if <paramref name="varId" /> is invalid.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.GetHighTime(System.Int32)">
      <summary>
            Convenience method for getting the high time of the specified input.
            </summary>
      <param name="inputNum">
            The number of the input to get the high time of.
            </param>
      <returns>
            The elapsed time (in seconds) that the specified input was last on
            or -1 if <paramref name="inputNum" /> is not a valid input number.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.GetInput(System.Int32)">
      <summary>
            Convenience method for getting an input by number.
            </summary>
      <param name="inputNum">
            The number of the input to get (1 or 2);
            </param>
      <returns>
            The requested input or null if <paramref name="inputNum" /> is an
            invalid input number or the requested input is a null reference.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.GetRelay(System.Int32)">
      <summary>
            Convenience method for getting a relay by number.
            </summary>
      <param name="relayNum">
            The number of the relay to get (1 - 10).
            </param>
      <returns>
            The requested relay, or null if <paramref name="relayNum" /> is not
            a value of 1 - 10, or if the requested relay is currently set null
            somehow.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.GetSensor(System.Int32)">
      <summary>
            Convenience method for getting a sensor by number.
            </summary>
      <param name="inputNum">
            The number of the sensor to get (1 - 3).
            </param>
      <returns>
            The requested sensor, or null if <paramref name="inputNum" /> is an invalid
            sensor number or the requested sensor is a null reference.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.HighTime1">
      <summary>
            Gets the amount of time (in seconds) that <see cref="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Input1" /> was
            last on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.HighTime2">
      <summary>
            Gets the amount of time (in seconds) that <see cref="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Input2" /> was
            last on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Input1">
      <summary>
            Gets the first input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Input2">
      <summary>
            Gets the second input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay1">
      <summary>
            Gets or sets the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay10">
      <summary>
            Gets or sets the tenth relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay2">
      <summary>
            Gets or sets the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay3">
      <summary>
            Gets or sets the third relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay4">
      <summary>
            Gets or sets the fourth relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay5">
      <summary>
            Gets or sets the fifth relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay6">
      <summary>
            Gets or sets the sixth relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay7">
      <summary>
            Gets or sets the seventh relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay8">
      <summary>
            Gets or sets the eigth relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Relay9">
      <summary>
            Gets or sets the ninth relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Reset">
      <summary>
            Resets all the state values back to their defaults.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Sensor1">
      <summary>
            Gets the first sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Sensor2">
      <summary>
            Gets the second sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Sensor3">
      <summary>
            Gets the third sensor input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Serial">
      <summary>
            Gets the serial number (MAC) of the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideExternalVar(System.Int32,System.Double)">
      <summary>
            Explicitly sets or overrides the value of an external variable.
            </summary>
      <param name="varId">
            The ID of the variable to set.
            </param>
      <param name="val">
            The value to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="varId" /> is not a valid ID.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideHighTime(System.Int32,System.Double)">
      <summary>
            Explicitly sets or overrides the high time for a given input.
            </summary>
      <param name="inputNum">
            The number of the input to set the high time for (1 or 2).
            </param>
      <param name="highTime">
            The amount of time elapsed (in seconds) since the input was last
            switched on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputNum" /> must be either 1 or 2.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideInput(System.Int32,CyrusBuilt.ControlByWeb.Inputs.StandardInput)">
      <summary>
            Explicitly sets or overrides the specified input.
            </summary>
      <param name="inputNum">
            The number of the input to set (1 or 2).
            </param>
      <param name="input">
            The input to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputNum" /> must be either 1 or 2.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideSensor(System.Int32,CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Explicitly sets or overrides the specified sensor input.
            </summary>
      <param name="inputNum">
            The number of the input to set (1 - 3).
            </param>
      <param name="sensor">
            The sensor to assign to the input.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputNum" /> is an invalid sensor number.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideSerial(System.Net.NetworkInformation.PhysicalAddress)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The serial to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideSerial(System.String)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The string containing the serial to set.
            </param>
      <exception cref="T:System.FormatException">
        <paramref name="serial" /> could not be parsed into a valid
            <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> (serial).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideTempUnits(CyrusBuilt.ControlByWeb.TemperatureUnits)">
      <summary>
            Explicitly sets or overrides the temperature units of measure.
            </summary>
      <param name="units">
            The units of measure to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideTime(CyrusBuilt.ControlByWeb.Epoch)">
      <summary>
            Explicitly sets or overrides the time on the device.
            </summary>
      <param name="time">
            The time to set (Unix/Epoch time).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetOrOverrideTime(System.Int64)">
      <summary>
            Explicitly sets or overrides the Epoch (Unix) time value.
            </summary>
      <param name="seconds">
            The number of seconds elapsed since January 1, 1970 (epoch).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.SetRelay(System.Int32,CyrusBuilt.ControlByWeb.Relays.Relay)">
      <summary>
            Convenience method for setting a relay by number.
            </summary>
      <param name="relayNum">
            The number of the relay to set (1 - 10).
            </param>
      <param name="rel">
            The <see cref="T:CyrusBuilt.ControlByWeb.Relays.Relay" /> object to apply to the specified relay.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> must be an integer value 1 - 10.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Time">
      <summary>
            Gets the current time as reported by the device in Unix time (epoch
            time) which is the number of seconds elapsed since January 1, 1970
            (the epoch).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10State.Units">
      <summary>
            Gets the unit of measure for the temperature sensors.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Utils">
      <summary>
            Utility methods specific to the WebRelay-10 module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Utils.GetActionFromString(System.String)">
      <summary>
            Gets an <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action" /> from the specified string.
            </summary>
      <param name="action">
            The string to get the action from.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action" /> associated with the specified string;
            Otherwise, <see cref="F:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action.None" />.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Utils.GetActionString(CyrusBuilt.ControlByWeb.WebRelay.WebRelay10Action)">
      <summary>
            Converts the specified action into its string equivalent.
            </summary>
      <param name="action">
            The action to convert.
            </param>
      <returns>
            The string representation of the specified action.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController">
      <summary>
            Used to monitor and control a ControlByWeb WebRelay module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayController</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayController</b>
            class with the IP address of the module to control and the port to 
            communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayModuleController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.AutoRebootEnabled">
      <summary>
            Gets or sets whether or not the auto-reboot feature is enabled.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.ChangeRelayState(CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Sets the state of the relay inside the device.
            </summary>
      <param name="state">
            The state to set the relay to.
            </param>
      <returns>
            The current state of the device - or - null if no response is
            recieved from the device.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.ClearRebootCounter">
      <summary>
            Clears the reboot counter (reset back to zero).
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.GetState">
      <summary>
            Connects to the device and gets its current state.
            </summary>
      <returns>
            If successful, returns a new WebRelay state object containing
            the device's current state. Returns null if no response received
            from the device. 
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.OnPolled(CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventArgs)">
      <summary>
            Raises the polled event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.OnPollFailed(CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventArgs)">
      <summary>
            Raises the poll failed event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.Polled">
      <summary>
            Occurs when the device state is polled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.PollFailed">
      <summary>
            Occurs when polling the device fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.PollInterval">
      <summary>
            Gets or sets the poll interval (in seconds).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.PulseRelay">
      <summary>
            Pulses the relay for the default amount of time. Pulsing the relay
            temporarily switches the relay on and back off again. The default
            pulse time is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PULSE_TIME" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.PulseRelay(System.Double)">
      <summary>
            Pulses the relay for the specified amount of time. Pulsing the relay
            temporarily switches the relay on and back off again.
            </summary>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay.
            </param>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.ResetState">
      <summary>
            Resets the state of the WebRelay module to its defaults. This resets
            the actual device, not the state of this component.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.SetState(CyrusBuilt.ControlByWeb.WebRelay.WebRelayState)">
      <summary>
            Sets the state of the WebRelay device.
            </summary>
      <param name="state">
            The state to set. This state is what will be committed to the device.
            </param>
      <exception cref="T:System.ArgumentNullException">
            state cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.SwitchRelayOff">
      <summary>
            Switches the relay off.
            </summary>
      <returns>
            The current state of the device - or - null if no response is
            recieved.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayController.SwitchRelayOn">
      <summary>
            Switches the relay on.
            </summary>
      <returns>
            The current state of the device - or - null if no response is
            recieved.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventArgs">
      <summary>
            Web relay poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventArgs" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventArgs.#ctor(CyrusBuilt.ControlByWeb.WebRelay.WebRelayState)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventArgs" /> 
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollEventHandler">
      <summary>
            Poll event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The poll event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventArgs">
      <summary>
            Web relay poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventArgs" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventArgs" />
            class with the exception that caused the failure.
            </summary>
      <param name="ex">
            The exception that caused the failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayPollFailedEventHandler">
      <summary>
            Poll failed event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The poll failure event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController">
      <summary>
            Used to monitor and control a ControlByWeb WebRelay Quad module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController</b>
            class. This is the default controller.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController</b>
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController</b>
            class with the IP address of the module to control and the port to 
            communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController</b>
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.BeginPollCycle">
      <summary>
            Begins the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.ChangeRelayState(System.Int32,CyrusBuilt.ControlByWeb.Relays.RelayState)">
      <summary>
            Changes the state of a specific relay.
            </summary>
      <param name="relayNum">
            The number of the relay to change the state of.
            </param>
      <param name="state">
            The state to set.
            </param>
      <returns>
            The current state of the device. If no response recieved from the
            device, then returns null.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value of 1 - 4.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.GetState">
      <summary>
            Connects to the device and gets its current state.
            </summary>
      <returns>
            If successful, returns a new WebRelay state object containing
            the device's current state. Returns null if no response received
            from the device. 
            </returns>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.OnPolled(CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventArgs)">
      <summary>
            Raises the polled event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.OnPollFailed(CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventArgs)">
      <summary>
            Raises the poll failed event.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.Polled">
      <summary>
            Occurs when the device state is polled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.PollFailed">
      <summary>
            Occurs when polling the device fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.PollInterval">
      <summary>
            Gets or sets the poll interval (in seconds).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.PulseRelay(System.Int32)">
      <summary>
            Pulses the specified relay for the default amount of time (1.5 
            seconds). Pulsing the relay temporarily switches the relay on 
            and back off again.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value of 1 - 4.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulses the specified relay for the specified amount of time.
            Pulsing the relay temporarily switches the relay on and back off
            again.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value of 1 - 4.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.ResetState">
      <summary>
            Resets the state of the WebRelay Quad module to its defaults.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.SetState(CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState)">
      <summary>
            Sets the state of WebRelay Quad device.
            </summary>
      <param name="state">
            The state to set. This state is what will be committed to the device.
            </param>
      <exception cref="T:System.ArgumentNullException">
            state cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.SwitchRelayOff(System.Int32)">
      <summary>
            Switches the specified relay off.
            </summary>
      <param name="relayNum">
            The number of the relay to switch off.
            </param>
      <returns>
            The current state of the device. If no response recieved from the
            device, then returns null.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value of 1 - 4.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadController.SwitchRelayOn(System.Int32)">
      <summary>
            Switches the specified relay on.
            </summary>
      <param name="relayNum">
            The number of the relay to switch on.
            </param>
      <returns>
            The current state of the device. If no response recieved from the
            device, then returns null.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value of 1 - 4.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            This object instance has been disposed - or - The IP address of the
            device to connect to is undefined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Unable to establish a connection to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read/write the underlying NetworkStream.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Either the device is configured to use Basic Authentication
            and no control password was sent - or - invalid credentials
            were used.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventArgs">
      <summary>
            WebRelay Quad poll event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventArgs" />
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventArgs.#ctor(CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventArgs" />
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollEventHandler">
      <summary>
            WebRelay Quad poll event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The poll event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventArgs">
      <summary>
            WebRelay Quad poll failed event arguments.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventArgs" />
            class.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventArgs" /> 
            class with the exception that is the cause of the poll failure. 
            </summary>
      <param name="ex">
            The exception that is the cause of the poll failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the poll failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadPollFailedEventHandler">
      <summary>
            WebRelay Quad poll failed event handler.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The poll failure event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState">
      <summary>
            The state of a ControlByWeb WebRelay Quad module. This is essentially
            the same as a WebRelay, except there are four relays instead of one.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.Clone">
      <summary>
            Clones the current state instance into a new instance using a deep
            copy of the current instance.
            </summary>
      <returns>
            A duplicate (but separate) copy of this state instance.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.GetRelay(System.Int32)">
      <summary>
            Convenience method for getting a relay reference by number.
            </summary>
      <param name="relayNum">
            The number of the relay to get.
            </param>
      <returns>
            The requested relay.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayNum must be an integer value not less than one and not greater
            than four (because there are exactly four relays).
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.Relay1">
      <summary>
            Gets or sets the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.Relay2">
      <summary>
            Gets or sets the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.Relay3">
      <summary>
            Gets or sets the third relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.Relay4">
      <summary>
            Gets or sets the fourth relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.Reset">
      <summary>
            Resets the state back to defaults.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState.ToString">
      <summary>
            Converts the current instance of <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState" />
            to a string.
            </summary>
      <returns>
            The string representation of the current <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayQuadState" />
            instance.
            </returns>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState">
      <summary>
            The state of a ControlByWeb WebRelay module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebRelay.WebRelayState</b>
            class.  This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.Clone">
      <summary>
            Clones this state instance to a new duplicate instance using a deep
            copy of the current instance.
            </summary>
      <returns>
            A duplicate (but separate) copy of this state instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.InputState">
      <summary>
            Gets or sets the state of the input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.RebootState">
      <summary>
            Gets or sets the state of the reboot flag.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.Relay">
      <summary>
            Gets or sets the actual relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.Reset">
      <summary>
            Resets the state back to defaults.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.ResetRebootCount">
      <summary>
            Resets the total reboot count back to zero.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.ToString">
      <summary>
            Converts the current instance of <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState" />
            to a string.
            </summary>
      <returns>
            The string representation of the current <see cref="T:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState" />
            instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebRelay.WebRelayState.TotalReboots">
      <summary>
            Gets or sets the total number of reboots.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction">
      <summary>
            Defines possible event actions for the WebSwitch module.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.TurnRelayOn">
      <summary>
            Will turn the relay(s) on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.TurnRelayOff">
      <summary>
            Will turn the relay(s) off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.PulseRelay">
      <summary>
            Will pulse the relays(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.ToggleRelay">
      <summary>
            Will toggle the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.SetExtVar">
      <summary>
            Will set an external veriable.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.DisableEvents">
      <summary>
            Disables scheduled events. (Only used by WebSwitch Plus)
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.EnableEvents">
      <summary>
            Enables scheduled events. (Only used by WebSwitch Plus)
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.None">
      <summary>
            No action will be performed.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants">
      <summary>
            Value constants specific to the WebSwitch device.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTION_PULSE_RELAY">
      <summary>
            Pulse the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTION_RELAY_OFF">
      <summary>
            Turn the relay(s) off.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTION_RELAY_ON">
      <summary>
            Turn the relay(s) on.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTION_TOGGLE_RELAY">
      <summary>
            Toggle the relay(s).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_ACTIVATE_RELAY">
      <summary>
            The relay(s) will be switched ON.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_CLEAR_EXT_VAR0">
      <summary>
            The value of external variable 0 will be cleared.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_DEACTIVATE_RELAY">
      <summary>
            The relay(s) will be switched OFF.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_DISABLE_EVENTS">
      <summary>
            Scheduled events will be disabled. (Only used by WebSwitch Plus)
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_ENABLE_EVENTS">
      <summary>
            Scheduled events will be enabled. (Only used by WebSwitch Plus)
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_NO_ACTION">
      <summary>
            No action will be taken.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_PULSE_RELAY">
      <summary>
            The relay(s) will be pulsed.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_SET_EXT_VAR0">
      <summary>
            External variable 0 will be set with a value.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.ACTIONCODE_TOGGLE_RELAY">
      <summary>
            The relay(s) will be toggled ON, then OFF.
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MAX_EXT_VAR_ID">
      <summary>
            The minimum external variable ID (0).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MIN_EXT_VAR_ID">
      <summary>
            The maximum external variable ID (4).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.TOTAL_EXT_VARS">
      <summary>
            The total number of external variables supported by the WebSwitch (5).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.TOTAL_INPUTS">
      <summary>
            The total number of inputs the WebSwitch Plus has (2).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.TOTAL_RELAYS">
      <summary>
            The total number of relays the WebSwitch and WebSwitch Plus has (2).
            </summary>
    </member>
    <member name="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.TOTAL_SENSORS">
      <summary>
            The total number of sensors the WebSwitch Plus has (3).
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController">
      <summary>
            Used to monitor and control a ControlyByWeb WebSwitch module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController" />
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController" /> 
            class with the IP address of the module to control and the port to 
            communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController" />
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.BeginPollCycle">
      <summary>
            Begins polling the device for status.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.ClearDevicePowerUpFlag">
      <summary>
            Clears the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.ClearPowerLossCounter">
      <summary>
            Clears the power loss counter.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.GetDiagnostics">
      <summary>
            Gets diagnostic information from the device.
            </summary>
      <returns>
            If successful, a <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchDiagnostics" /> state object
            containing diagnostic information specific to the device;
            Otherwise, null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.GetState">
      <summary>
            Gets the state of the WebSwitch device.
            </summary>
      <returns>
            If successful, the state of the device; Otherwise, null.
            </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.OnPolled(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollEventArgs)">
      <summary>
            Raises the <see cref="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.Polled" /> event if a handler is assigned.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.OnPollFailed(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs)">
      <summary>
            Raises the <see cref="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.PollFailed" /> event if a handler is assigned.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.Polled">
      <summary>
            Occurs when the device is successfully polled for status.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.PollFailed">
      <summary>
            Occurs when polling the device status fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.PulseRelay(System.Int32)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.ResetState">
      <summary>
            Resets the state of the WebSwitch module to its defaults.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.SetState(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState)">
      <summary>
            Commits the set to the device. Currently, only the relay states
            will be committed, all other values will be ignored.
            </summary>
      <param name="state">
            The state to commit to the device.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="state" /> cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.SwitchRelayOff(System.Int32)">
      <summary>
             Convenience method for switching the specified relay off if it is
             not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch off.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchController.SwitchRelayOn(System.Int32)">
      <summary>
            Convenience method for switching the specified relay on if it is
            not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchDiagnostics">
      <summary>
            WebSwitch diagnostics.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchDiagnostics.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchDiagnostics" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchDiagnostics.MemoryPowerUpFlag">
      <summary>
            Because the MemoryPowerUpFlag is only supported in the WebSwitch
            Plus, this property will always return <see cref="F:CyrusBuilt.ControlByWeb.PowerUpFlag.Off" />,
            indicating normal operation.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchDiagnostics.SetMemoryPowerUpFlag(CyrusBuilt.ControlByWeb.PowerUpFlag)">
      <summary>
            NOT SUPPORTED. DO NOT USE.
            </summary>
      <param name="state">
            None, as this method is not supported.
            </param>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnsupportedMethodException">
            This method is unsupported and should not be used.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController">
      <summary>
            Used to monitor and control a ControlyByWeb WebSwitch Plus module.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController" />
            class with the IP address of the module to control.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController" /> 
            class with the IP address of the module to control and the port to 
            communicate with it on.
            </summary>
      <param name="ipAddr">
            The IP address of the module to control.
            </param>
      <param name="port">
            The port to communicate with the device on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.#ctor(System.Net.IPEndPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController" /> 
            class with the IP endpoint to connect to.
            </summary>
      <param name="endpoint">
            The IP endpoint to connect to.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.BasicAuthEnabled">
      <summary>
            Gets or sets whether or not Basic Authentication is enabled.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.BeginPollCycle">
      <summary>
            Begins polling the device for status.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.ClearDevicePowerUpFlag">
      <summary>
            Clears the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.ClearMemPowerUpFlag">
      <summary>
            Clears the internal memory power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.ClearPowerLossCounter">
      <summary>
            Clears the power loss counter.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.ClearPowerUpFlags">
      <summary>
            Clears both the memory power up flag and the device power up flag.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.Dispose">
      <summary>
            Releases all the resources that are used by this component.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.Dispose(System.Boolean)">
      <summary>
            Releases all resources that are used by this component.
            </summary>
      <param name="disposing">
            Set <b>true</b> to dispose both managed and unmanaged resources.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.EndPollCycle">
      <summary>
            Ends the poll cycle.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.GetDiagnostics">
      <summary>
            Gets diagnostic information from the device.
            </summary>
      <returns>
            If successful, a <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusDiagnostics" /> state object
            containing diagnostic information specific to the device;
            Otherwise, null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.GetEvent(System.Int32)">
      <summary>
            Retrieves an event from the WebSwitch Plus device.
            </summary>
      <param name="id">
            The ID of the event to retrieve.
            </param>
      <returns>
            If successful, the requested event; Otherwise, null.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> must be greater than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID" />
            and less than or equal to <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.GetEvents">
      <summary>
            Gets a collection of events from the WebSwitch Plus device.
            </summary>
      <returns>
            A collection of events retrieved from the device. If no events
            exist, then an empty collection is returned.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.GetState">
      <summary>
            Gets the state of the WebSwitch Plus device.
            </summary>
      <returns>
            If successful, the state of the device; Otherwise, null.
            </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.IsConnected">
      <summary>
            Gets whether or not this component is connected to the device.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.IsDisposed">
      <summary>
            Gets whether or not this component instance has been disposed.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.ModuleAddress">
      <summary>
            Gets or sets the IP address of the module to communicate with.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.OnPolled(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusPollEventArgs)">
      <summary>
            Raises the <see cref="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.Polled" /> event if a handler is assigned.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.OnPollFailed(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs)">
      <summary>
            Raises the <see cref="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.PollFailed" /> event if a handler is assigned.
            </summary>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.Password">
      <summary>
            The password to use when Basic Authentication is enabled.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.Polled">
      <summary>
            Occurs when the device is successfully polled for status.
            </summary>
    </member>
    <member name="E:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.PollFailed">
      <summary>
            Occurs when polling the device status fails.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.Port">
      <summary>
            Gets or sets the port to communicate with the device on. The default
            is <see cref="F:CyrusBuilt.ControlByWeb.Common.DEFAULT_PORT" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The port number assignment is invalid. Must be 1 - 65535.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.PulseRelay(System.Int32)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.PulseRelay(System.Int32,System.Double)">
      <summary>
            Pulse the specified relay.
            </summary>
      <param name="relayNum">
            The number of the relay to pulse.
            </param>
      <param name="pulseTime">
            The amount of time (in seconds) to pulse the relay.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.ArgumentException">
            pulseTime cannot be greater than <see cref="F:CyrusBuilt.ControlByWeb.Common.MAX_PULSE_DURATION" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.ResetState">
      <summary>
            Resets the state of the WebSwitch Plus module to its defaults.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.SetState(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState)">
      <summary>
            Commits the set to the device. Currently, only the relay states
            will be committed, all other values will be ignored.
            </summary>
      <param name="state">
            The state to commit to the device.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="state" /> cannot be null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.SwitchRelayOff(System.Int32)">
      <summary>
             Convenience method for switching the specified relay off if it is
             not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch off.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusController.SwitchRelayOn(System.Int32)">
      <summary>
            Convenience method for switching the specified relay on if it is
            not already.
            </summary>
      <param name="relayNum">
            The number of the relay to switch on.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The specified relay number is invalid.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The instance has been disposed - or - The device's IP address
            is not defined.
            </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
            An error occurred when accessing the socket.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.ConnectionFailedException">
            Could not connect to the device.
            </exception>
      <exception cref="T:System.IO.IOException">
            Could not read or write the underlying <see cref="T:System.Net.Sockets.NetworkStream" />.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.UnauthorizedAccessException">
            Authentication is enabled and the password is either undefined or
            incorrect.
            </exception>
      <exception cref="T:CyrusBuilt.ControlByWeb.BadResponseFromDeviceException">
            The response message returned from the device is not valid. It may
            be worth double-checking to see that the right <see cref="T:System.Net.IPAddress" />
            was specified. If another device exists at that address and is
            listening on the same port, it may return some time of message
            that is not understood by this method.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusDiagnostics">
      <summary>
            WebSwitch Plus diagnostics.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusDiagnostics.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusDiagnostics" /> 
            class. This is the default constructor.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent">
      <summary>
            An event generated by the WebSwitch module. Note that this event object
            should be read-only by user code, so all properties contain getters
            only. You can use the set methods to explicitly to set or override the
            values if necessary (such as from methods that populate the properties
            with values parsed from a response from the device).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Action">
      <summary>
            Gets the action applied to this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Active">
      <summary>
            Indicates whether or not this event is active.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.AlwaysOn">
      <summary>
            Gets whether or not this event is always on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Count">
      <summary>
            Gets the number of remaining times the event will occur. If this
            property is zero and the event is active, then the event is always
            on.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.CurrentTime">
      <summary>
            Gets the current date and time as reported by the device.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.DisableEvent">
      <summary>
            Convenience method for disabling this event.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Equals(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)">
      <summary>
            Determines whether the specified CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent
            is equal to the current instance.
            </summary>
      <param name="evt">
            The CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent to compare to
            the current instance.
            </param>
      <returns>
            true if the specified CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent
            is equal to the current CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent; 
            otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the
            current instance.
            </summary>
      <param name="obj">
            The System.Object to compare to the current instance.
            </param>
      <returns>
            true if the specified System.Object is equal to the current
            CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchEvent; otherwise, false.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            The hash code for this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Id">
      <summary>
            Gets the ID of this event.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.IsDisabled">
      <summary>
            Gets whether or not this event is disabled.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.NextEvent">
      <summary>
            Gets the date and time when this event will occur next.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Period">
      <summary>
            For events that occur more than one time, this property indicates the
            period of the event (time between occurrences). The unit of time is
            indicated after the value (seconds(s), minutes(m), hours(h), days(d),
            or weeks(w)). If this property is set to 0, then the event has been
            disabled. For example, 1d would be a period of one day.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.PulseDuration">
      <summary>
            Gets the time (in seconds) at the relay (output) will be turned on
            (if <see cref="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Action" /> is <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.PulseRelay" />).
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.RelayNumber">
      <summary>
            Gets the relay number (output) the event will apply to (1 or 2).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Reset">
      <summary>
            Resets all state values back to their defaults except for
            <see cref="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Id" /> because the ID of the event instance should never
            change during the lifetime of the event unless there is need to 
            override the ID for some reason.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverrideAction(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction)">
      <summary>
            Sets or overrides the action being applied.
            </summary>
      <param name="action">
            The action to apply to the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverrideActiveState(System.Boolean)">
      <summary>
            Sets or overrides the current active state.
            </summary>
      <param name="active">
            Whether or not the state should be active.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverrideCount(System.Int32)">
      <summary>
            Sets or overrides the number of remaining times this event will
            occur.
            </summary>
      <param name="count">
            The number of times the this event will occur. If this field is set
            to zero and the event is active, then this event is always on.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverrideCurrentTime(System.DateTime)">
      <summary>
            Sets or overrides the current time as reported by the device.
            </summary>
      <param name="time">
            The date/time to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverrideId(System.Int32)">
      <summary>
            Sets or overrides the ID of this event.
            </summary>
      <param name="id">
            The ID to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            id must be a value between <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MIN_ID" />
            and <see cref="F:CyrusBuilt.ControlByWeb.Events.EventConstants.EVENT_MAX_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverrideNextEvent(System.DateTime)">
      <summary>
            Sets or overrides the time that the next event will occur.
            </summary>
      <param name="eventTime">
            The time of the next event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverridePeriod(System.String)">
      <summary>
            Sets or overrides the period of the event (time between occurrences).
            </summary>
      <param name="period">
            The unit of time is indicated after the value (seconds(s), 
            minutes(m), hours(h), days(d), or weeks(w)). Setting this to "0"
            will disable the event.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverridePulseDuration(System.Double)">
      <summary>
            Sets or overrides the pulse duration (in seconds) if <see cref="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.Action" />
            is set to <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.PulseRelay" />.
            </summary>
      <param name="pulse">
            The duration in seconds to pulse the relay.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent.SetOrOverrideRelay(System.Int32)">
      <summary>
            Sets or overrides the ID of the relay that the action applies to.
            </summary>
      <param name="relayId">
            The relay number the action applies to.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            relayId must be either 1 or 2.
            </exception>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection">
      <summary>
            A collection for storing WebSwitch Plus events.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Add(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)">
      <summary>
            Adds an <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> to the collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> to add.
            </param>
      <returns>
            The position into which the new <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> was
            inserted.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Adding another event would exceed the current capacity of the
            collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Contains(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)">
      <summary>
            Determines whether or not the collection contains a specific
            <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" />.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> to locate in the collection.
            </param>
      <returns>
        <b>true</b> if the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> is found in the
            collection; Otherwise, <b>false</b>.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.CopyTo(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent[],System.Int32)">
      <summary>
            Copies the elements of the collection to a <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" />
            array, starting at a particular array index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> array that is the
            destination of the elements copied from the collection.  The
            <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> array must have zero-based indexing.
            </param>
      <param name="index">
            The zero-based index in the array at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
            array is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
            array is multidimensional. -or- The number of elements in the
            source array is greater than the available space from index to the
            end of the destination array.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Exists(System.Int32)">
      <summary>
            Convenience method for determining if a specific event exists in
            the collection.
            </summary>
      <param name="id">
            The ID of the event to search for.
            </param>
      <returns>
        <code>true</code> if the event exists; Otherwise, <code>false</code>.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.GetEventById(System.Int32)">
      <summary>
            Gets an <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> from the collection by ID.
            </summary>
      <param name="id">
            The ID of the event to locate.
            </param>
      <returns>
            If successful, the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> with the matching ID;
            Otherwise, null.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.IndexOf(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)">
      <summary>
            Determines the index of a specific <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> in the
            collection.
            </summary>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> to locate in the collection.
            </param>
      <returns>
            The index of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> if found in the collection;
            Otherwise, -1.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Insert(System.Int32,CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)">
      <summary>
            Inserts a new <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> into the collection at the
            specified index.
            </summary>
      <param name="index">
            The zero-based index at which the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> should be
            inserted.
            </param>
      <param name="evt">
            The <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> to insert into the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            index is not a valid index in the collection.
            </exception>
      <exception cref="T:System.NullReferenceException">
            evt is a null reference in the collection.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.IsNullOrEmpty(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection)">
      <summary>
            Determines if the specified <b>WebSwitchPlusEventCollection</b> is null or
            is an empty collection.
            </summary>
      <param name="collection">
            The <b>WebSwitchPlusEventCollection</b> to check.
            </param>
      <returns>
        <b>true</b> if the collection is null or empty; Otherwise,
            <b>false</b>.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent" /> at the specified
            index.
            </summary>
      <param name="index">
            The zero-based index of the <see cref="!:WebSwitchPlussEvent" /> to
            get or set.
            </param>
      <returns>
            The event at the specified index.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Remove(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Remove(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)"]</p>
      </summary>
      <param name="evt">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="evt"/&gt; documentation for "M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Remove(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)"]</p>
      </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEventCollection.Replace(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent,CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusEvent)">
      <summary>
            Replaces a given event with another. If the event being replaced
            does not exist or the replacement is null. This does nothing.
            </summary>
      <param name="current">
            The event to replace.
            </param>
      <param name="replacement">
            The replacement event. If the replacement event already exists in
            the collection, it will be ignored.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusPollEventArgs">
      <summary>
            Poll event arguments class for the WebSwitch Plus.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusPollEventArgs.#ctor(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusPollEventArgs</b>
            class with the state of the device.
            </summary>
      <param name="state">
            The current state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusPollEventArgs.State">
      <summary>
            Gets the current state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusPollEventHandler">
      <summary>
            Handler delegate for the device poll events.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState">
      <summary>
            Represents the state of a ControlByWeb WebSwitch Plus device. Note that most 
            of the properties of this object are read-only by user code, so most of
            the properties contain getters only. You can use the set methods to 
            explicitly to set or override the values if necessary (such as from 
            methods that populate the properties with values parsed from a response
            from the device).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState" />
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Clone">
      <summary>
            Creates a new instance of WebSwitchPlusState that is a deep copy of the
            current instance.
            </summary>
      <returns>
            A WebSwitchPlusState that is a copy of this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.ExtVar0">
      <summary>
            Gets the value of exteral variable zero.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.ExtVar1">
      <summary>
            Gets the value of external variable one.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.ExtVar2">
      <summary>
            Gets the value of external variable two.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.ExtVar3">
      <summary>
            Gets the value of external variable three.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.ExtVar4">
      <summary>
            Gets the value of external variable four.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.GetExternalVar(System.Int32)">
      <summary>
            Convenience method for getting the value of the specified external
            variable.
            </summary>
      <param name="varId">
            The ID of the external variable to get the value of.
            </param>
      <returns>
            The value of the external variable.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="varId" /> must be a value <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MIN_EXT_VAR_ID" />
            - <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MAX_EXT_VAR_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.GetInput(System.Int32)">
      <summary>
            Convenience method for getting an input by number.
            </summary>
      <param name="inputNum">
            The number of the input to get.
            </param>
      <returns>
            The requested input, or null if <paramref name="inputNum" /> is
            invalid.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.GetRelay(System.Int32)">
      <summary>
            Convenience method for getting a relay by number.
            </summary>
      <param name="relayNum">
            The number of the relay to get.
            </param>
      <returns>
            The requested relay, or null if <paramref name="relayNum" /> is
            invalid.
            </returns>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.GetSensor(System.Int32)">
      <summary>
            Gets a sensor by number.
            </summary>
      <param name="sensorNum">
            The number of the sensor to get.
            </param>
      <returns>
            The requested sensor, or null if <paramref name="sensorNum" /> is
            invalid.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Input1">
      <summary>
            Gets the first input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Input2">
      <summary>
            Gets the second input.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.RebootAttempts1">
      <summary>
            Gets the reboot attempts for the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.RebootAttempts2">
      <summary>
            Gets the reboot attempts for the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.RebootFailures1">
      <summary>
            Gets the reboot failures for the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.RebootFailures2">
      <summary>
            Gets the reboot failures for the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.RebootState1">
      <summary>
            Gets the reboot state of the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.RebootState2">
      <summary>
            Gets the reboot state of the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Relay1">
      <summary>
            Gets or sets the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Relay2">
      <summary>
            Gets or sets the second relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Reset">
      <summary>
            Resets all the state values back to their defaults.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Sensor1">
      <summary>
            Gets the first sensor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Sensor2">
      <summary>
            Gets the second sensor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Sensor3">
      <summary>
            Gets the third sensor.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Serial">
      <summary>
            Gets the serial.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetExternalVar(System.Int32,System.Double)">
      <summary>
            Convenience method for setting an external variable value by ID.
            </summary>
      <param name="varId">
            The ID of the external variable to set.
            </param>
      <param name="value">
            The value to assign to the specified external variable.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="varId" /> must be a value <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MIN_EXT_VAR_ID" />
            - <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MAX_EXT_VAR_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetInput(System.Int32,CyrusBuilt.ControlByWeb.Inputs.StandardInput)">
      <summary>
            Convenience method for setting a specific input.
            </summary>
      <param name="inputNum">
            The number of the input to set.
            </param>
      <param name="input">
            The input to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputNum" /> must be 1 or 2.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideExtVar0(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable zero.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideExtVar1(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable one.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideExtVar2(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable two.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideExtVar3(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable three.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideExtVar4(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable four.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideInput1(CyrusBuilt.ControlByWeb.Inputs.StandardInput)">
      <summary>
            Explicitly sets or overrides the first input.
            </summary>
      <param name="input">
            The input to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideInput2(CyrusBuilt.ControlByWeb.Inputs.StandardInput)">
      <summary>
            Explicitly sets or overrides the second input.
            </summary>
      <param name="input">
            The input to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideRebootAttempts1(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot attempts for the
            first relay.
            </summary>
      <param name="attempts">
            The number of reboot attempts to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideRebootAttempts2(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot attempts for the
            second relay.
            </summary>
      <param name="attempts">
            The number of reboot attempts to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideRebootFailures1(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot failures for the
            first relay.
            </summary>
      <param name="failures">
            The number of failures to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideRebootFailures2(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot failures for the
            second relay.
            </summary>
      <param name="failures">
            The number of failures to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideRebootState1(CyrusBuilt.ControlByWeb.RebootState)">
      <summary>
            Explicitly sets or overrides the reboot state for the first relay.
            </summary>
      <param name="state">
            The state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideRebootState2(CyrusBuilt.ControlByWeb.RebootState)">
      <summary>
            Explicitly sets or overrides the reboot state for the second relay.
            </summary>
      <param name="state">
            The state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideSensor1(CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Explicitly sets or overrides the first sensor.
            </summary>
      <param name="sensor">
            The sensor to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideSensor2(CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Explicitly sets or overrides the second sensor.
            </summary>
      <param name="sensor">
            The sensor to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideSensor3(CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Explicitly sets or overrides the third sensor.
            </summary>
      <param name="sensor">
            The sensor to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideSerial(System.Net.NetworkInformation.PhysicalAddress)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The serial to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideSerial(System.String)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The string containing the serial to set.
            </param>
      <exception cref="T:System.FormatException">
        <paramref name="serial" /> could not be parsed into a valid
            <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> (serial).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideTempUnits(CyrusBuilt.ControlByWeb.TemperatureUnits)">
      <summary>
            Explicitly sets or overrides the temperature unit of measture.
            </summary>
      <param name="units">
            The unit of measure to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideTime(CyrusBuilt.ControlByWeb.Epoch)">
      <summary>
            Explicitly sets or overrides the time on the device.
            </summary>
      <param name="time">
            The time to set (Unix/Epoch time).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideTime(System.Int64)">
      <summary>
            Explicitly sets or overrides the Epoch (Unix) time value.
            </summary>
      <param name="seconds">
            The number of seconds elapsed since January 1, 1970 (epoch).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideTotalReboots1(System.Int32)">
      <summary>
            Explicitly sets or overrides the total number of reboots for the
            first relay.
            </summary>
      <param name="reboots">
            The total number of reboots to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetOrOverrideTotalReboots2(System.Int32)">
      <summary>
            Explicitly sets or overrides the total number of reboots for the
            second relay.
            </summary>
      <param name="reboots">
            The total number of reboots to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetRelay(System.Int32,CyrusBuilt.ControlByWeb.Relays.Relay)">
      <summary>
            Convenience method for setting a specific relay.
            </summary>
      <param name="relayNum">
            The number of the relay to set.
            </param>
      <param name="relay">
            The relay to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> must be 1 or 2.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.SetSensor(System.Int32,CyrusBuilt.ControlByWeb.Inputs.SensorInput)">
      <summary>
            Convenience method for setting a specific sensor.
            </summary>
      <param name="sensorNum">
            The number of the sensor to set.
            </param>
      <param name="sensor">
            The sensor to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sensorNum" /> must be 1, 2, or 3.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Time">
      <summary>
            Gets the time as reported by the device..
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.TotalReboots1">
      <summary>
            Gets the total reboots for the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.TotalReboots2">
      <summary>
            Gets the total reboots for the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPlusState.Units">
      <summary>
            Gets the unit of measure for the sensor temperature.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollEventArgs">
      <summary>
            Poll event arguments class for the WebSwitch (non-plus model).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollEventArgs.#ctor(CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollEventArgs</b>
            class with the state of the device.
            </summary>
      <param name="state">
            The state of the device.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollEventArgs.State">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollEventHandler">
      <summary>
            Handler delegate for the device poll events.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs">
      <summary>
            WebSwitch and WebSwitch Plus poll failed event arguments class.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs</b>
            class with the exception that is the cause of the poll failure.
            </summary>
      <param name="failCause">
            The exception that is the cause of the poll failure.
            </param>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailedEventArgs.FailureCause">
      <summary>
            Gets the exception that is the cause of the poll failure.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchPollFailEventHandler">
      <summary>
            Handler delegate for poll failure events.
            </summary>
      <param name="sender">
            The object sending the event call.
            </param>
      <param name="e">
            The event arguments.
            </param>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState">
      <summary>
            Represents the state of a ControlByWeb WebSwitch device. Note that most 
            of the properties of this object are read-only by user code, so most of
            the properties contain getters only. You can use the set methods to 
            explicitly to set or override the values if necessary (such as from 
            methods that populate the properties with values parsed from a response
            from the device).
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.#ctor">
      <summary>
            Initializes a new instance of the <b>CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState</b>
            class. This is the default constructor.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.Clone">
      <summary>
            Creates a new instance of WebSwitchState that is a deep copy of the
            current instance.
            </summary>
      <returns>
            A WebSwitchState that is a copy of this instance.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.ExtVar0">
      <summary>
            Gets the value of exteral variable zero.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.ExtVar1">
      <summary>
            Gets the value of external variable one.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.ExtVar2">
      <summary>
            Gets the value of external variable two.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.ExtVar3">
      <summary>
            Gets the value of external variable three.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.ExtVar4">
      <summary>
            Gets the value of external variable four.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.GetExternalVar(System.Int32)">
      <summary>
            Convenience method for getting the value of the specified external
            variable.
            </summary>
      <param name="varId">
            The ID of the external variable to get the value of.
            </param>
      <returns>
            The value of the external variable.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="varId" /> must be a value <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MIN_EXT_VAR_ID" />
            - <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MAX_EXT_VAR_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.GetRelay(System.Int32)">
      <summary>
            Convenience method for getting a relay by number.
            </summary>
      <param name="relayNum">
            The number of the relay to get.
            </param>
      <returns>
            The requested relay, or null if <paramref name="relayNum" /> is
            invalid.
            </returns>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.RebootAttempts1">
      <summary>
            Gets the reboot attempts for the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.RebootAttempts2">
      <summary>
            Gets the reboot attempts for the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.RebootFailures1">
      <summary>
            Gets the reboot failures for the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.RebootFailures2">
      <summary>
            Gets the reboot failures for the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.RebootState1">
      <summary>
            Gets the reboot state of the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.RebootState2">
      <summary>
            Gets the reboot state of the second relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.Relay1">
      <summary>
            Gets or sets the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.Relay2">
      <summary>
            Gets or sets the second relay.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.Reset">
      <summary>
            Resets all the state values back to their defaults.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.Serial">
      <summary>
            Gets the serial.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetExternalVar(System.Int32,System.Double)">
      <summary>
            Convenience method for setting an external variable value by ID.
            </summary>
      <param name="varId">
            The ID of the external variable to set.
            </param>
      <param name="value">
            The value to assign to the specified external variable.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="varId" /> must be a value <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MIN_EXT_VAR_ID" />
            - <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchConstants.MAX_EXT_VAR_ID" />.
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideExtVar0(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable zero.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideExtVar1(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable one.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideExtVar2(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable two.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideExtVar3(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable three.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideExtVar4(System.Double)">
      <summary>
            Explicitly sets or overrides the value of external variable four.
            </summary>
      <param name="value">
            The value to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideRebootAttempts1(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot attempts for the
            first relay.
            </summary>
      <param name="attempts">
            The number of reboot attempts to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideRebootAttempts2(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot attempts for the
            second relay.
            </summary>
      <param name="attempts">
            The number of reboot attempts to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideRebootFailures1(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot failures for the
            first relay.
            </summary>
      <param name="failures">
            The number of failures to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideRebootFailures2(System.Int32)">
      <summary>
            Explicitly sets or overrides the number of reboot failures for the
            second relay.
            </summary>
      <param name="failures">
            The number of failures to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideRebootState1(CyrusBuilt.ControlByWeb.RebootState)">
      <summary>
            Explicitly sets or overrides the reboot state for the first relay.
            </summary>
      <param name="state">
            The state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideRebootState2(CyrusBuilt.ControlByWeb.RebootState)">
      <summary>
            Explicitly sets or overrides the reboot state for the second relay.
            </summary>
      <param name="state">
            The state to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideSerial(System.Net.NetworkInformation.PhysicalAddress)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The serial to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideSerial(System.String)">
      <summary>
            Explictly sets or overrides the serial number (MAC) of the device.
            </summary>
      <param name="serial">
            The string containing the serial to set.
            </param>
      <exception cref="T:System.FormatException">
        <paramref name="serial" /> could not be parsed into a valid
            <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> (serial).
            </exception>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideTime(CyrusBuilt.ControlByWeb.Epoch)">
      <summary>
            Explicitly sets or overrides the time on the device.
            </summary>
      <param name="time">
            The time to set (Unix/Epoch time).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideTime(System.Int64)">
      <summary>
            Explicitly sets or overrides the Epoch (Unix) time value.
            </summary>
      <param name="seconds">
            The number of seconds elapsed since January 1, 1970 (epoch).
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideTotalReboots1(System.Int32)">
      <summary>
            Explicitly sets or overrides the total number of reboots for the
            first relay.
            </summary>
      <param name="reboots">
            The total number of reboots to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetOrOverrideTotalReboots2(System.Int32)">
      <summary>
            Explicitly sets or overrides the total number of reboots for the
            second relay.
            </summary>
      <param name="reboots">
            The total number of reboots to set.
            </param>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.SetRelay(System.Int32,CyrusBuilt.ControlByWeb.Relays.Relay)">
      <summary>
            Convenience method for setting a specific relay.
            </summary>
      <param name="relayNum">
            The number of the relay to set.
            </param>
      <param name="relay">
            The relay to set.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relayNum" /> must be 1 or 2.
            </exception>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.Time">
      <summary>
            Gets the time as reported by the device..
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.TotalReboots1">
      <summary>
            Gets the total reboots for the first relay.
            </summary>
    </member>
    <member name="P:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchState.TotalReboots2">
      <summary>
            Gets the total reboots for the second relay.
            </summary>
    </member>
    <member name="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchUtils">
      <summary>
            WebSwitch module utiliy methods.
            </summary>
    </member>
    <member name="M:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchUtils.GetActionFromString(System.String)">
      <summary>
            Gets a <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction" /> from the specified string.
            </summary>
      <param name="action">
            The string to get the action from.
            </param>
      <returns>
            The <see cref="T:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction" /> associated with the specified string;
            Otherwise, <see cref="F:CyrusBuilt.ControlByWeb.WebSwitch.WebSwitchAction.None" />.
            </returns>
    </member>
  </members>
</doc>